From af8cef8cf497fccb6f21e977ac2af087b4460452 Mon Sep 17 00:00:00 2001
From: Andrew Aye <andrew.aye@gmail.com>
Date: Tue, 12 Sep 2023 15:52:33 -0700
Subject: [PATCH] Fixes for compilation.

---
 CMakeLists.txt             |  4 ++++
 cmake/CompilerChecks.cmake |  2 ++
 cmake/FileSupport.cmake    | 47 ++++++++++++++++++++++++++++++++++++++
 cmake/WindowsSupport.cmake | 10 --------
 libtiff/CMakeLists.txt     |  2 +-
 libtiff/tif_open.c         |  6 ++---
 libtiff/tiffio.h           |  7 ++++--
 libtiff/tiffiop.h          |  4 +---
 8 files changed, 63 insertions(+), 19 deletions(-)
 create mode 100644 cmake/FileSupport.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index cdd5495..6b66ee4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -101,6 +101,9 @@ include(InternalCodecs)
 # Check for Deflate codec
 include(DeflateCodec)
 
+# File IO support
+include(FileSupport)
+
 # Check for PixarLog codec
 include(PixarLogCodec)
 
@@ -185,6 +188,7 @@ message(STATUS "  Build deprecated features:          ${tiff-deprecated}")
 message(STATUS "  Enable linker symbol versioning:    ${HAVE_LD_VERSION_SCRIPT}")
 message(STATUS "  Support Microsoft Document Imaging: ${mdi}")
 message(STATUS "  Use win32 IO:                       ${USE_WIN32_FILEIO}")
+message(STATUS "  Use unix IO:                        ${USE_UNIX_FILEIO}")
 message(STATUS "")
 message(STATUS " Support for internal codecs:")
 message(STATUS "  CCITT Group 3 & 4 algorithms:       ${ccitt}")
diff --git a/cmake/CompilerChecks.cmake b/cmake/CompilerChecks.cmake
index 8ac5564..a69e4a2 100644
--- a/cmake/CompilerChecks.cmake
+++ b/cmake/CompilerChecks.cmake
@@ -122,3 +122,5 @@ foreach(flag ${test_flags})
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}")
     endif (${test_c_flag})
 endforeach(flag ${test_flags})
+
+SET (CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
diff --git a/cmake/FileSupport.cmake b/cmake/FileSupport.cmake
new file mode 100644
index 0000000..d99c55c
--- /dev/null
+++ b/cmake/FileSupport.cmake
@@ -0,0 +1,47 @@
+# Fil IO support
+#
+# Copyright © 2015 Open Microscopy Environment / University of Dundee
+# Copyright © 2021 Roger Leigh <rleigh@codelibre.net>
+# Written by Roger Leigh <rleigh@codelibre.net>
+#
+# Permission to use, copy, modify, distribute, and sell this software and
+# its documentation for any purpose is hereby granted without fee, provided
+# that (i) the above copyright notices and this permission notice appear in
+# all copies of the software and related documentation, and (ii) the names of
+# Sam Leffler and Silicon Graphics may not be used in any advertising or
+# publicity relating to the software without the specific, prior written
+# permission of Sam Leffler and Silicon Graphics.
+#
+# THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
+# WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+#
+# IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
+# ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
+# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
+# WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF
+# LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
+# OF THIS SOFTWARE.
+
+# Win32 file I/O
+set(win32_io_default OFF)
+if(WIN32)
+    set(win32_io_default ON)
+endif()
+
+option(win32-io "Use Win32 I/O" ${win32_io_default})
+
+set(USE_WIN32_FILEIO ${win32-io})
+
+# Unix file I/O
+set(unix_io_default OFF)
+if(NOT WIN32)
+    set(unix_io_default ON)
+endif()
+
+option(unix-io "Use Unix I/O" ${unix_io_default})
+
+set(USE_UNIX_FILEIO ${unix-io})
+
+# If both are disabled then the client application must implement
+# the necessary IO functions.
\ No newline at end of file
diff --git a/cmake/WindowsSupport.cmake b/cmake/WindowsSupport.cmake
index a60bba9..87d677f 100644
--- a/cmake/WindowsSupport.cmake
+++ b/cmake/WindowsSupport.cmake
@@ -35,13 +35,3 @@ if(MSVC)
     # Don't warn about use of deprecated functions
     add_compile_options(/wd4996)
 endif()
-
-# Win32 file I/O
-set(win32_io_default OFF)
-if(WIN32)
-    set(win32_io_default ON)
-endif()
-
-option(win32-io "Use Win32 I/O" ${win32_io_default})
-
-set(USE_WIN32_FILEIO ${win32-io})
diff --git a/libtiff/CMakeLists.txt b/libtiff/CMakeLists.txt
index 9c8024e..10c79b6 100755
--- a/libtiff/CMakeLists.txt
+++ b/libtiff/CMakeLists.txt
@@ -100,7 +100,7 @@ target_sources(tiff PRIVATE
 
 if(USE_WIN32_FILEIO)
   target_sources(tiff PRIVATE tif_win32.c)
-else()
+elseif(USE_UNIX_FILEIO)
   target_sources(tiff PRIVATE tif_unix.c)
 endif()
 
diff --git a/libtiff/tif_open.c b/libtiff/tif_open.c
index 23fcf81..45c5815 100644
--- a/libtiff/tif_open.c
+++ b/libtiff/tif_open.c
@@ -670,14 +670,14 @@ const char *TIFFSetFileName(TIFF *tif, const char *name)
 /*
  * Return open file's I/O descriptor.
  */
-int TIFFFileno(TIFF *tif) { return (tif->tif_fd); }
+intptr_t TIFFFileno(TIFF *tif) { return (tif->tif_fd); }
 
 /*
  * Set open file's I/O descriptor, and return previous value.
  */
-int TIFFSetFileno(TIFF *tif, int fd)
+intptr_t TIFFSetFileno(TIFF *tif, intptr_t fd)
 {
-    int old_fd = tif->tif_fd;
+    intptr_t old_fd = tif->tif_fd;
     tif->tif_fd = fd;
     return old_fd;
 }
diff --git a/libtiff/tiffio.h b/libtiff/tiffio.h
index 2046054..2f322c0 100644
--- a/libtiff/tiffio.h
+++ b/libtiff/tiffio.h
@@ -400,8 +400,8 @@ extern "C"
     extern tmsize_t TIFFVTileSize(TIFF *tif, uint32_t nrows);
     extern uint32_t TIFFDefaultStripSize(TIFF *tif, uint32_t request);
     extern void TIFFDefaultTileSize(TIFF *, uint32_t *, uint32_t *);
-    extern int TIFFFileno(TIFF *);
-    extern int TIFFSetFileno(TIFF *, int);
+    extern intptr_t TIFFFileno(TIFF *);
+    extern intptr_t TIFFSetFileno(TIFF *, intptr_t);
     extern thandle_t TIFFClientdata(TIFF *);
     extern thandle_t TIFFSetClientdata(TIFF *, thandle_t);
     extern int TIFFGetMode(TIFF *);
@@ -516,6 +516,9 @@ extern int TIFFReadRGBAImageOriented(TIFF *, uint32_t, uint32_t, uint32_t *,
                                          TIFFErrorHandlerExtR handler,
                                          void *warnhandler_user_data);
 
+    extern TIFFErrorHandler _TIFFwarningHandler;
+    extern TIFFErrorHandler _TIFFerrorHandler;
+
     extern TIFF *TIFFOpen(const char *, const char *);
     extern TIFF *TIFFOpenExt(const char *, const char *, TIFFOpenOptions *opts);
 #ifdef __WIN32__
diff --git a/libtiff/tiffiop.h b/libtiff/tiffiop.h
index fbf7b07..1746d0d 100644
--- a/libtiff/tiffiop.h
+++ b/libtiff/tiffiop.h
@@ -105,7 +105,7 @@ typedef struct TIFFOffsetAndDirNumber TIFFOffsetAndDirNumber;
 struct tiff
 {
     char *tif_name; /* name of open file */
-    int tif_fd;     /* open file descriptor */
+    intptr_t tif_fd;/* open file descriptor */
     int tif_mode;   /* open mode (O_*) */
     uint32_t tif_flags;
 #define TIFF_FILLORDER 0x00003U   /* natural bit fill order for machine */
@@ -420,8 +420,6 @@ extern "C"
     extern void _TIFFprintAscii(FILE *, const char *);
     extern void _TIFFprintAsciiTag(FILE *, const char *, const char *);
 
-    extern TIFFErrorHandler _TIFFwarningHandler;
-    extern TIFFErrorHandler _TIFFerrorHandler;
     extern TIFFErrorHandlerExt _TIFFwarningHandlerExt;
     extern TIFFErrorHandlerExt _TIFFerrorHandlerExt;
     void _TIFFErrorEarly(TIFFOpenOptions *opts, thandle_t clientdata,
-- 
2.40.1.windows.1

