/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS (X86_64) Common - Math [Vector] [F32_04].inl
    »Author«    Andrew Aye (mailto: teikitu@andrewaye.com, https://www.andrew.aye.page)
    »Version«   5.16 | »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2022, Andrew Aye.  All Rights Reserved.
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license,
    visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
#if !defined(TGS_COMMON_MATH_API_VECTOR_F32_04_INL)
#define TGS_COMMON_MATH_API_VECTOR_F32_04_INL
#pragma once


/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- tgMH_Set_S_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_Init_ELEM_F32_04_1( TgFLOAT32_C fX, TgFLOAT32_C fY, TgFLOAT32_C fZ, TgFLOAT32_C fW )
{
    return (_mm_set_ps( fW, fZ, fY, fX ));
}


/* ---- tgMH_SETP_S_F32_04_1 ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_Init_Point_ELEM_F32_04_1( TgFLOAT32_C fX, TgFLOAT32_C fY, TgFLOAT32_C fZ )
{
    return (tgMH_Init_ELEM_F32_04_1( fX, fY, fZ, 1.0F ));
}


/* ---- tgMH_SETV_S_F32_04_1 ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_Init_Vector_ELEM_F32_04_1( TgFLOAT32_C fX, TgFLOAT32_C fY, TgFLOAT32_C fZ )
{
    return (tgMH_Init_ELEM_F32_04_1( fX, fY, fZ, 0.0F ));
}


/* ---- tgMH_SETP_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_Init_Point_F32_04_1( TgVEC_F32_04_1_C vRight )
{
    return (tgMH_OR_F32_04_1( KTgUNIT_W_V128.m_vF32_04_1, tgMH_AND_F32_04_1( vRight, KTgFFF0_V128.m_vF32_04_1 ) ));
}


/* ---- tgMH_SETV_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_Init_Vector_F32_04_1( TgVEC_F32_04_1_C vRight )
{
    return (tgMH_AND_F32_04_1( vRight, KTgFFF0_V128.m_vF32_04_1 ));
}


/* ---- tgMH_SPX_F32_04_1 -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_SPX_F32_04_1( TgVEC_F32_04_1_C vLeft )
{
    return (_mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 0, 0, 0, 0 ) ));
}


/* ---- tgMH_SPY_F32_04_1 -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_SPY_F32_04_1( TgVEC_F32_04_1_C vLeft )
{
    return (_mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 1, 1, 1, 1 ) ));
}


/* ---- tgMH_SPZ_F32_04_1 -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_SPZ_F32_04_1( TgVEC_F32_04_1_C vLeft )
{
    return (_mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 2, 2, 2, 2 ) ));
}


/* ---- tgMH_SPW_F32_04_1 -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_SPW_F32_04_1( TgVEC_F32_04_1_C vLeft )
{
    return (_mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 3, 3, 3 ) ));
}


/* ---- tgMH_DOT3_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_DOT3_F32_04_1( TgVEC_F32_04_1_C vLeft, TgVEC_F32_04_1_C vRight )
{
    return (_mm_dp_ps( vLeft, vRight, 0x7F ));
}


/* ---- tgMH_CX_F32_04_1 --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_CX_F32_04_1( TgVEC_F32_04_1_C vLeft, TgVEC_F32_04_1_C vRight )
{
    const __m128                        vX1 = _mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 1, 0, 2 ) );
    const __m128                        vX2 = _mm_shuffle_ps( vRight, vRight, _MM_SHUFFLE( 3, 0, 2, 1 ) );
    const __m128                        vX3 = _mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 0, 2, 1 ) );
    const __m128                        vX4 = _mm_shuffle_ps( vRight, vRight, _MM_SHUFFLE( 3, 1, 0, 2 ) );

    return (_mm_sub_ps( _mm_mul_ps( vX3, vX4 ), _mm_mul_ps( vX1, vX2 ) ));
}


/* ---- tgMH_UCX_F32_04_1 -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_UCX_F32_04_1( TgVEC_F32_04_1_C vLeft, TgVEC_F32_04_1_C vRight )
{
    const __m128                        vX1 = _mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 1, 0, 2 ) );
    const __m128                        vX2 = _mm_shuffle_ps( vRight, vRight, _MM_SHUFFLE( 3, 0, 2, 1 ) );
    const __m128                        vX3 = _mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 0, 2, 1 ) );
    const __m128                        vX4 = _mm_shuffle_ps( vRight, vRight, _MM_SHUFFLE( 3, 1, 0, 2 ) );
    const __m128                        vF0 = _mm_sub_ps( _mm_mul_ps( vX3, vX4 ), _mm_mul_ps( vX1, vX2 ) );

    return (tgMH_NORM_F32_04_1( (vF0) ));
}


/* ---- tgMH_UCX_LEN_F32_04_1 ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_UCX_LEN_F32_04_1( TgVEC_F32_04_1_PCU ptvRet_Length, TgVEC_F32_04_1_C vLeft, TgVEC_F32_04_1_C vRight )
{
    const __m128                        vX1 = _mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 1, 0, 2 ) );
    const __m128                        vX2 = _mm_shuffle_ps( vRight, vRight, _MM_SHUFFLE( 3, 0, 2, 1 ) );
    const __m128                        vX3 = _mm_shuffle_ps( vLeft, vLeft, _MM_SHUFFLE( 3, 0, 2, 1 ) );
    const __m128                        vX4 = _mm_shuffle_ps( vRight, vRight, _MM_SHUFFLE( 3, 1, 0, 2 ) );
    const __m128                        vF0 = _mm_sub_ps( _mm_mul_ps( vX3, vX4 ), _mm_mul_ps( vX1, vX2 ) );

    return (tgMH_NORM_LEN_F32_04_1( ptvRet_Length, (vF0) ));
}


/* ---- tgMH_PRX3_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL tgMH_PRX3_F32_04_1( TgVEC_F32_04_1_C v0, TgVEC_F32_04_1_C v1 )
{
    return tgMH_PRX3_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&v0, *(TgVEC_S_F32_04_1_CP)&v1 );
}


/* ---- tgMH_PRX_CMP_EQ_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL tgMH_PRX_CMP_EQ_F32_04_1( TgVEC_F32_04_1_C v0, TgVEC_F32_04_1_C v1 )
{
    return tgMH_PRX_CMP_EQ_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&v0, *(TgVEC_S_F32_04_1_CP)&v1 );
}


/* ---- tgMH_QT_INV_F32_04_1 ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_QT_INV_F32_04_1( TgVEC_F32_04_1_C qR1 )
{
    TgUN_V128                           vResult;

    vResult.m_vS_F32_04_1 = tgMH_QT_INV_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&qR1 );
    return (vResult.m_vF32_04_1);
}


/* ---- tgMH_QT_MUL_F32_04_1 ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_QT_MUL_F32_04_1( TgVEC_F32_04_1_C b, TgVEC_F32_04_1_C c )
{
    TgUN_V128                           vResult;

    vResult.m_vS_F32_04_1 = tgMH_QT_MUL_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&b, *(TgVEC_S_F32_04_1_CP)&c );
    return (vResult.m_vF32_04_1);
}


/* ---- tgMH_QT_Slerp_F32_04_1 --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_QT_Slerp_F32_04_1( TgVEC_F32_04_1_C mvA, TgVEC_F32_04_1_C mvB, TgVEC_F32_04_1_C mvC )
{
    TgUN_V128                           vA, vB, vC, vResult;

    vA.m_vF32_04_1 = mvA;
    vB.m_vF32_04_1 = mvB;
    vC.m_vF32_04_1 = mvC;

    vResult.m_vS_F32_04_1 = tgMH_QT_Slerp_S_F32_04_1( vA.m_vS_F32_04_1.x, vB.m_vS_F32_04_1, vC.m_vS_F32_04_1 );
    return (vResult.m_vF32_04_1);
}


/* ---- tgMH_QT_Vector_To_Vector_F32_04_1 ---------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_QT_Vector_To_Vector_F32_04_1( TgVEC_F32_04_1_C b, TgVEC_F32_04_1_C c )
{
    TgUN_V128                           vResult;

    vResult.m_vS_F32_04_1 = tgMH_QT_Vector_To_Vector_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&b, *(TgVEC_S_F32_04_1_CP)&c );
    return (vResult.m_vF32_04_1);
}


/* ---- tgMH_QT_TX_F32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_QT_TX_F32_04_1( TgVEC_F32_04_1_C qR1, TgVEC_F32_04_1_C qR2 )
{
    TgUN_V128                           vResult;

    vResult.m_vS_F32_04_1 = tgMH_QT_TX_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&qR1, *(TgVEC_S_F32_04_1_CP)&qR2 );
    return (vResult.m_vF32_04_1);
}


/* ---- tgMH_QT_INV_TX_F32_04_1 -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_F32_04_1 tgMH_QT_INV_TX_F32_04_1( TgVEC_F32_04_1_C qR1, TgVEC_F32_04_1_C qR2 )
{
    TgUN_V128                           vResult;

    vResult.m_vS_F32_04_1 = tgMH_QT_INV_TX_S_F32_04_1( *(TgVEC_S_F32_04_1_CP)&qR1, *(TgVEC_S_F32_04_1_CP)&qR2 );
    return (vResult.m_vF32_04_1);
}


/* =============================================================================================================================================================================== */
#endif
