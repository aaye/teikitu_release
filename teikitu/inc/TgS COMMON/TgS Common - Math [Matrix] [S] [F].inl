/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Matrix] [S] [F].inl
    »Author«    Andrew Aye (mailto: teikitu@andrewaye.com, https://www.andrew.aye.page)
    »Version«   5.17 | »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2022, Andrew Aye.  All Rights Reserved.
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license,
    visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
#if !defined(TGS_COMMON_MATH_MATRIX_S_F_INL)

#if !defined (TEMPLATE_TYPE_EXPANSION__RELOAD)
    #error Must be included as part of a type expansion include chain
#endif


/* == Common ===================================================================================================================================================================== */

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/*  TgS Common - Math API [Matrix] [S] [F]                                                                                                                                         */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

/* ---- FCN_M(tgMH_CLI_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_CLI_S)( MAT_S_T(PCU) pmM0 )
{
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_COL * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        pmM0->m_aElement[iIndex] = ((iIndex % TEMPLATE__VECTOR_DIM) == (iIndex / TEMPLATE__VECTOR_DIM)) ? TYPE_K(1) : TYPE_K(0);
    };
}


/* ---- FCN_M(tgMH_Set_Rot_S) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Rot_S)( MAT_S_T(PCU) pmM0, MAT_S_T(CPCU) pmM1 )
{
    pmM0->_11 = pmM1->_11;
    pmM0->_21 = pmM1->_21;
    pmM0->_31 = pmM1->_31;

    pmM0->_12 = pmM1->_12;
    pmM0->_22 = pmM1->_22;
    pmM0->_32 = pmM1->_32;

    pmM0->_13 = pmM1->_13;
    pmM0->_23 = pmM1->_23;
    pmM0->_33 = pmM1->_33;
}


/* ---- FCN_M(tgMH_Set_T_S) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_T_S)( MAT_S_T(PCU) pmM0, VEC_S_T(1,C) vS0 )
{
    pmM0->_41 = vS0.m_aData[0];
    pmM0->_42 = vS0.m_aData[1];
    pmM0->_43 = vS0.m_aData[2];
}


/* ---- FCN_M(tgMH_Set_T_ELEM_S) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_T_ELEM_S)( MAT_S_T(PCU) pmM0, VAR_T(C) fX, VAR_T(C) fY, VAR_T(C) fZ )
{
    pmM0->_41 = fX;
    pmM0->_42 = fY;
    pmM0->_43 = fZ;
}


/* ---- FCN_M(tgMH_Set_Euler_S) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler_S)( MAT_S_T(PCU) pmM0, VEC_S_T(1,C) vEul )
{
    FCN_M(tgMH_Set_Euler_ELEM_S)( pmM0, vEul.x, vEul.y, vEul.z );
}


/* ---- M(tgMH_Set_Euler_S) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler_ELEM_S)( MAT_S_T(PCU) pmM0, VAR_T(C) fX, VAR_T(C) fY, VAR_T(C) fZ )
{
    VAR_T()                             fSinZ, fCosZ, fSinX, fCosX, fSinY, fCosY;

    FCN_F(tgPM_SINCOS)( &fSinX, &fCosX, fX ); /**< Roll */
    FCN_F(tgPM_SINCOS)( &fSinY, &fCosY, fY ); /**< Pitch */
    FCN_F(tgPM_SINCOS)( &fSinZ, &fCosZ, fZ ); /**< Yaw */

    pmM0->_11 = fCosY*fCosZ;
    pmM0->_21 = fCosY*fSinZ;
    pmM0->_31 = -fSinY;

    pmM0->_12 = fSinX*fSinY*fCosZ - fCosX*fSinZ;
    pmM0->_22 = fSinX*fSinY*fSinZ + fCosX*fCosZ;
    pmM0->_32 = fSinX*fCosY;

    pmM0->_13 = fCosX*fSinY*fCosZ + fSinX*fSinZ;
    pmM0->_23 = fCosX*fSinY*fSinZ - fSinX*fCosZ;
    pmM0->_33 = fCosX*fCosY;
}


/* ---- M(tgMH_Set_Euler_X) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler_X_S)( MAT_S_T(PCU) pmM0, VAR_T(C) fX )
{
    VAR_T()                             fSinX, fCosX;

    FCN_F(tgPM_SINCOS)( &fSinX, &fCosX, fX );

    pmM0->_11 = TYPE_K(1);
    pmM0->_21 = TYPE_K(0);
    pmM0->_31 = TYPE_K(0);

    pmM0->_12 = TYPE_K(0);
    pmM0->_22 = fCosX;
    pmM0->_32 = fSinX;

    pmM0->_13 = TYPE_K(0);
    pmM0->_23 = -fSinX;
    pmM0->_33 = fCosX;
}


/* ---- M(tgMH_Set_Euler_Y) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler_Y_S)( MAT_S_T(PCU) pmM0, VAR_T(C) fY )
{
    VAR_T()                             fSinY, fCosY;

    FCN_F(tgPM_SINCOS)( &fSinY, &fCosY, fY );

    pmM0->_11 = fCosY;
    pmM0->_21 = TYPE_K(0);
    pmM0->_31 = -fSinY;

    pmM0->_12 = TYPE_K(0);
    pmM0->_22 = TYPE_K(1);
    pmM0->_32 = TYPE_K(0);

    pmM0->_13 = fSinY;
    pmM0->_23 = TYPE_K(0);
    pmM0->_33 = fCosY;
}


/* ---- M(tgMH_Set_Euler_Z) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler_Z_S)( MAT_S_T(PCU) pmM0, VAR_T(C) fZ )
{
    VAR_T()                             fSinZ, fCosZ;

    FCN_F(tgPM_SINCOS)( &fSinZ, &fCosZ, fZ );

    pmM0->_11 = fCosZ;
    pmM0->_21 = fSinZ;
    pmM0->_31 = TYPE_K(0);

    pmM0->_12 = -fSinZ;
    pmM0->_22 = fCosZ;
    pmM0->_32 = TYPE_K(0);

    pmM0->_13 = TYPE_K(0);
    pmM0->_23 = TYPE_K(0);
    pmM0->_33 = TYPE_K(1);
}


/* ---- FCN_M(tgMH_Set_Quat_S) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Quat_S)( MAT_S_T(PCU) pmM0, VEC_S_T(1,C) qR0 )
{
    VAR_T(C)        fXS = TYPE_K(2,0) * qR0.x;
    VAR_T(C)        fYS = TYPE_K(2,0) * qR0.y;
    VAR_T(C)        fZS = TYPE_K(2,0) * qR0.z;

    VAR_T(C)        fXX = fXS * qR0.x;
    VAR_T(C)        fXY = fXS * qR0.y;
    VAR_T(C)        fXZ = fXS * qR0.z;
    VAR_T(C)        fXW = fXS * qR0.w;

    VAR_T(C)        fYY = fYS * qR0.y;
    VAR_T(C)        fYZ = fYS * qR0.z;
    VAR_T(C)        fYW = fYS * qR0.w;

    VAR_T(C)        fZZ = fZS * qR0.z;
    VAR_T(C)        fZW = fZS * qR0.w;

    pmM0->_11 = TYPE_K(1) - (fYY + fZZ);
    pmM0->_21 = fXY + fZW;
    pmM0->_31 = fXZ - fYW;

    pmM0->_12 = fXY - fZW;
    pmM0->_22 = TYPE_K(1) - (fXX + fZZ);
    pmM0->_32 = fYZ + fXW;

    pmM0->_13 = fXZ + fYW;
    pmM0->_23 = fYZ - fXW;
    pmM0->_33 = TYPE_K(1) - (fXX + fYY);
}


/* ---- FCN_M(tgMH_ADD_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_ADD_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0, MAT_S_T(CPCU) pmM1 )
{
    #define EQN(A) FCN_V(tgMH_ADD_S)( pmM0->m_avCol[A], pmM1->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MUL_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MUL_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0, MAT_S_T(CPCU) pmM1 )
{
    #define EQN(A) FCN_V(tgMH_MUL_S)( pmM0->m_avCol[A], pmM1->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MUL_SM_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MUL_SM_S)( MAT_S_T(PCU) pmOUT_0, VAR_T(C) fScalar, MAT_S_T(CPCU) pmM1 )
{
    #define EQN(A) FCN_V(tgMH_MUL_SV_S)( fScalar, pmM1->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MUL_MS_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MUL_MS_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0, VAR_T(C) fScalar )
{
    #define EQN(A) FCN_V(tgMH_MUL_VS_S)( pmM0->m_avCol[A], fScalar )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_DIV_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_DIV_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0, MAT_S_T(CPCU) pmM1 )
{
    #define EQN(A) FCN_V(tgMH_DIV_S)( pmM0->m_avCol[A], pmM1->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_DIV_SM_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_DIV_SM_S)( MAT_S_T(PCU) pmOUT_0, VAR_T(C) fScalar, MAT_S_T(CPCU) pmM1 )
{
    #define EQN(A) FCN_V(tgMH_DIV_SV_S)( fScalar, pmM1->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_DIV_MS_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_DIV_MS_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0, VAR_T(C) fScalar )
{
    #define EQN(A) FCN_V(tgMH_DIV_VS_S)( pmM0->m_avCol[A], fScalar )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_SUB_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_SUB_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0, MAT_S_T(CPCU) pmM1 )
{
    #define EQN(A) FCN_V(tgMH_SUB_S)( pmM0->m_avCol[A], pmM1->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_NEG_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_NEG_S)( MAT_S_T(PCU) pmOUT_0, MAT_S_T(CPCU) pmM0 )
{
    #define EQN(A) FCN_V(tgMH_NEG_S)( pmM0->m_avCol[A] )
    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_NAN_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_M(tgMH_NAN_S)( MAT_S_T(CPCU) pmM0 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_COL * TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (FCN_F(tgPM_NAN)(pmM0->m_aElement[uiIndex]))
        {
            return (true);
        };
    };

    return (false);
}


/* =============================================================================================================================================================================== */
#endif
