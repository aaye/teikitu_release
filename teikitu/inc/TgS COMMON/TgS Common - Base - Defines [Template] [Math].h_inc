/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Base - Defines [Template] [Math].h_inc
    »Author«    Andrew Aye (mailto: teikitu@andrewaye.com, https://www.andrew.aye.page)
    »Version«   5.17 | »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2022, Andrew Aye.  All Rights Reserved.
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license,
    visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

#if !defined(TEMPLATE__TEST_AND_UNLOAD_TEMPLATE_MACROS) && !defined (TEMPLATE__TYPE_SIZE) && !defined(TEMPLATE__OVERRIDE_INT_TYPE)
    #error Invoked without sufficient inputs
#endif

#if defined(TEMPLATE__TEST_AND_UNLOAD_TEMPLATE_MACROS)

    /* Test to see if any of the macro definitions used for code generation have been defined for other reasons. */
    #if defined(FCN_C)
        #error macro should not be defined
    #endif
    #if defined(VAR_T)
        #error macro should not be defined
    #endif
    #if defined(VAR_K)
        #error macro should not be defined
    #endif
    #if defined(FCN_F)
        #error macro should not be defined
    #endif
    #if defined(UVAR_T)
        #error macro should not be defined
    #endif
    #if defined(TYPE_K)
        #error macro should not be defined
    #endif
    #if defined(TYPE_K_1)
        #error macro should not be defined
    #endif
    #if defined(TYPE_K_2)
        #error macro should not be defined
    #endif
    #if defined(UTYPE_K)
        #error macro should not be defined
    #endif
    #if defined(VEC_S_T)
           #error macro should not be defined
    #endif
    #if defined(VEC_S_T_1)
        #error macro should not be defined
    #endif
    #if defined(VEC_S_T_2)
        #error macro should not be defined
    #endif
    #if defined(VEC_K)
        #error macro should not be defined
    #endif
    #if defined(VEC_K_1)
        #error macro should not be defined
    #endif
    #if defined(VEC_K_2)
        #error macro should not be defined
    #endif
    #if defined(FCN_V)
        #error macro should not be defined
    #endif
    #if defined(FCN_V_1)
        #error macro should not be defined
    #endif
    #if defined(FCN_V_2)
        #error macro should not be defined
    #endif
    #if defined(VEC_T)
        #error macro should not be defined
    #endif
    #if defined(VEC_T_1)
        #error macro should not be defined
    #endif
    #if defined(VEC_T_2)
        #error macro should not be defined
    #endif
    #if defined(VEC_DEC_T)
        #error macro should not be defined
    #endif
    #if defined(VEC_DEC_T_1)
        #error macro should not be defined
    #endif
    #if defined(VEC_DEC_T_2)
        #error macro should not be defined
    #endif
    #if defined(VEC_DEC_T_3)
        #error macro should not be defined
    #endif
    #if defined(VEC_OBJ_T)
        #error macro should not be defined
    #endif
    #if defined(VEC_OBJ_T_1)
        #error macro should not be defined
    #endif
    #if defined(VEC_OBJ_T_2)
        #error macro should not be defined
    #endif
    #if defined(VEC_OBJ_T_3)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__UNLOAD_TEMPLATE_MACROS)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__TYPE_SIZE_TEXT)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__TYPE_SYMBOL)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__VEC_ASSIGN_EQN)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__VECTOR_DIM_BREAK_LZ)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__VEC_DESC)
        #error macro should not be defined
    #endif
    #if defined(GENERATE__MAT_ASSIGN)
        #error macro should not be defined
    #endif

    /* Force all of the file macros to unload (keep any of the input or calling macro definitions) */
    #undef TEMPLATE__TEST_AND_UNLOAD_TEMPLATE_MACROS
    #define GENERATE__UNLOAD_TEMPLATE_MACROS
    #if defined(ENABLE_RELOAD_GUARD)
        #include __FILE__
    #else
        #define ENABLE_RELOAD_GUARD
        #include __FILE__
        #undef ENABLE_RELOAD_GUARD
    #endif
#endif


/** @brief INPUT MACROS for Code generation include utility
    @def TEMPLATE__TEST_AND_UNLOAD_TEMPLATE_MACROS (Cleared, Latch, Optional) - Validates that all macro names defined in this file are unused

    @def TEMPLATE__ENABLE_INTEGER (Not Cleared, Optional) - Will generate integer based macro definitions, and floating point otherwise
    @def TEMPLATE__ENABLE_INT_FAST (Not Cleared, Optional) - Will use the fast integer types for the integer generation, and exact integers otherwise
    @def TEMPLATE__ENABLE_UNSIGNED (Not Cleared, Optional) - Will generate unsigned integer definitions
 
    @def TEMPLATE__TYPE_SIZE (Cleared, Required) - Specifies the bit count for the chosen type

    @def TEMPLATE__OVERRIDE_INT_TYPE (Cleared, Optional) - specifies the integer type to use (instead of fast or exact) [e.g., MAX for INT_MAX]
    @def TEMPLATE__VECTOR_DIM (Cleared, Optional) - Specifies the vector dimension to be used for the chosen type for code generation
    @def TEMPLATE__VECTOR_COL (Cleared, Optional) - Specifies the number of vectors to be used for the chosen type for code generation
*/


/* OUTPUT MACROS used by the client files

    Listed in the #undef section of the file (read below)

*/


#if !defined(GENERATE__UNLOAD_TEMPLATE_MACROS)

    #define GENERATE__UNLOAD_TEMPLATE_MACROS

    #if defined(TEMPLATE__ENABLE_INTEGER)

        #if defined(TEMPLATE__OVERRIDE_INT_TYPE)
            #define VAR_T_0(A)                      TgMACRO_CONCAT4( Tg, GENERATE__TYPE_SYMBOL, INT_, TEMPLATE__OVERRIDE_INT_TYPE )
            #define VAR_T_1(A)                      TgMACRO_CONCAT6( Tg, GENERATE__TYPE_SYMBOL, INT_, TEMPLATE__OVERRIDE_INT_TYPE, _, A )
            #define UVAR_T_0(A)                     TgMACRO_CONCAT4( Tg, U, INT_, TEMPLATE__OVERRIDE_INT_TYPE )
            #define UVAR_T_1(A)                     TgMACRO_CONCAT6( Tg, U, INT_, TEMPLATE__OVERRIDE_INT_TYPE, _, A )
            #define TEMPLATE__TYPE_SIZE             TgBUILD_HARDWARE__WORDSIZE
            #define UVAR_MASK                       TgMACRO_CONCAT4( KTgMASK_TRUE.m_var, GENERATE__TYPE_SYMBOL, INT_, TEMPLATE__OVERRIDE_INT_TYPE )
        #elif defined(TEMPLATE__ENABLE_INT_FAST)
            #define VAR_T_0(A)                      TgMACRO_CONCAT4( Tg, GENERATE__TYPE_SYMBOL, INT_F, GENERATE__TYPE_SIZE_TEXT )
            #define VAR_T_1(A)                      TgMACRO_CONCAT6( Tg, GENERATE__TYPE_SYMBOL, INT_F, GENERATE__TYPE_SIZE_TEXT, _, A )
            #define UVAR_T_0(A)                     TgMACRO_CONCAT4( Tg, U, INT_F, GENERATE__TYPE_SIZE_TEXT )
            #define UVAR_T_1(A)                     TgMACRO_CONCAT6( Tg, U, INT_F, GENERATE__TYPE_SIZE_TEXT, _, A )
            #define UVAR_MASK                       TgMACRO_CONCAT4( KTgMASK_TRUE.m_var, GENERATE__TYPE_SYMBOL, INT_F, GENERATE__TYPE_SIZE_TEXT )
        #else
            #define VAR_T_0(A)                      TgMACRO_CONCAT4( Tg, GENERATE__TYPE_SYMBOL, INT_E, GENERATE__TYPE_SIZE_TEXT )
            #define VAR_T_1(A)                      TgMACRO_CONCAT6( Tg, GENERATE__TYPE_SYMBOL, INT_E, GENERATE__TYPE_SIZE_TEXT, _, A )
            #define UVAR_T_0(A)                     TgMACRO_CONCAT4( Tg, U, INT_E, GENERATE__TYPE_SIZE_TEXT )
            #define UVAR_T_1(A)                     TgMACRO_CONCAT6( Tg, U, INT_E, GENERATE__TYPE_SIZE_TEXT, _, A )
            #define UVAR_MASK                       TgMACRO_CONCAT4( KTgMASK_TRUE.m_var, GENERATE__TYPE_SYMBOL, INT_E, GENERATE__TYPE_SIZE_TEXT )
        #endif

        #if defined(TEMPLATE__OVERRIDE_INT_TYPE)
            #define GENERATE__TYPE_SIZE_TEXT            TEMPLATE__OVERRIDE_INT_TYPE
        #elif TEMPLATE__TYPE_SIZE < 10
            #define GENERATE__TYPE_SIZE_TEXT            TgMACRO_CONCAT2( 0,TEMPLATE__TYPE_SIZE )
        #else
            #define GENERATE__TYPE_SIZE_TEXT            TEMPLATE__TYPE_SIZE
        #endif

        #if defined(TEMPLATE__ENABLE_UNSIGNED)
            #define GENERATE__TYPE_SYMBOL           U

            #define TYPE_K_1(A)                     TgMACRO_CONCAT3( UINT,TEMPLATE__TYPE_SIZE,_C )(A)
            #define TYPE_K_2(A,B)                   TgMACRO_CONCAT3( UINT,TEMPLATE__TYPE_SIZE,_C )(A)

        #else
            #define GENERATE__TYPE_SYMBOL           S

            #define TYPE_K_1(A)                     TgMACRO_CONCAT3( INT,TEMPLATE__TYPE_SIZE,_C )(A)
            #define TYPE_K_2(A,B)                   TgMACRO_CONCAT3( INT,TEMPLATE__TYPE_SIZE,_C )(A)

            #define UTYPE_K(A)                      TgMACRO_CONCAT3( UINT,TEMPLATE__TYPE_SIZE,_C )(A)
            #define UVAR_K(A)                       TgMACRO_CONCAT4( A, _, U, GENERATE__TYPE_SIZE_TEXT )
            #define UFCN_F(A)                       TgMACRO_CONCAT4( A, _, U, GENERATE__TYPE_SIZE_TEXT )
        #endif

        #if defined(TEMPLATE__OVERRIDE_INT_TYPE)
            #define FCN_C(A)                        imax##A
        #elif TEMPLATE__TYPE_SIZE > 32
            #define FCN_C(A)                        ll##A
        #else
            #define FCN_C(A)                        A
        #endif

    /*# defined(TEMPLATE__ENABLE_INTEGER) */
    #else

        #define VAR_T_0()                       TgMACRO_CONCAT2( TgFLOAT, GENERATE__TYPE_SIZE_TEXT )
        #define VAR_T_1(A)                      TgMACRO_CONCAT4( TgFLOAT, GENERATE__TYPE_SIZE_TEXT, _, A )
        #define GENERATE__TYPE_SIZE_TEXT        TEMPLATE__TYPE_SIZE
        #define GENERATE__TYPE_SYMBOL           F

        #define UVAR_T_0(A)                     TgMACRO_CONCAT4( Tg, U, INT_E, GENERATE__TYPE_SIZE_TEXT )
        #define UVAR_T_1(A)                     TgMACRO_CONCAT6( Tg, U, INT_E, GENERATE__TYPE_SIZE_TEXT, _, A )
        #define UVAR_K(A)                       TgMACRO_CONCAT4( A, _, U, GENERATE__TYPE_SIZE_TEXT )

        #if TEMPLATE__TYPE_SIZE == 32
            #define FCN_C(A)                        A##f
            #define TYPE_K_1(A)                     A##.0F
            #define TYPE_K_2(A,B)                   A##.##B##F
        #elif TEMPLATE__TYPE_SIZE == 64
            #define FCN_C(A)                        A
            #define TYPE_K_1(A)                     A##.0
            #define TYPE_K_2(A,B)                   A##.##B
        #endif

        #define UVAR_MASK                       TgMACRO_CONCAT2( KTgMASK_TRUE.m_varF, GENERATE__TYPE_SIZE_TEXT )

    /*# defined(TEMPLATE__ENABLE_INTEGER) */
    #endif




    #if !defined(TEMPLATE__VECTOR_DIM)
        #define TEMPLATE__VECTOR_DIM                1
    #endif

    #if TEMPLATE__VECTOR_DIM < 10
        #define GENERATE__VEC_ASSIGN_EQN            TgMACRO_CONCAT3( VEC_0, TEMPLATE__VECTOR_DIM, _1_ASSIGN_EQN )
        #define GENERATE__VECTOR_DIM_BREAK_LZ       _0
    #else
        #define GENERATE__VEC_ASSIGN_EQN            TgMACRO_CONCAT3( VEC_, TEMPLATE__VECTOR_DIM, _1_ASSIGN_EQN )
        #define GENERATE__VECTOR_DIM_BREAK_LZ       _
    #endif

    #define GENERATE__MAT_ASSIGN                TgMACRO_CONCAT3(MAT_0,TEMPLATE__VECTOR_COL,_ASSIGN_EQN)

    #define GENERATE__VEC_DESC                  TgMACRO_CONCAT4( GENERATE__TYPE_SYMBOL, GENERATE__TYPE_SIZE_TEXT, GENERATE__VECTOR_DIM_BREAK_LZ, TEMPLATE__VECTOR_DIM )
    #define GENERATE__VEC_UVAR_DESC             TgMACRO_CONCAT4( U, GENERATE__TYPE_SIZE_TEXT, GENERATE__VECTOR_DIM_BREAK_LZ, TEMPLATE__VECTOR_DIM )

    #define VAR_T(...)                          MULTI_MACRO(VAR_T, __VA_ARGS__)
    #define UVAR_T(...)                         MULTI_MACRO(UVAR_T, __VA_ARGS__)
    #define TYPE_K(...)                         MULTI_MACRO(TYPE_K, __VA_ARGS__)
    #define VAR_K(A)                            TgMACRO_CONCAT4( A, _, GENERATE__TYPE_SYMBOL, GENERATE__TYPE_SIZE_TEXT )
    #define FCN_F(A)                            TgMACRO_CONCAT4( A, _, GENERATE__TYPE_SYMBOL, GENERATE__TYPE_SIZE_TEXT )



    #define VEC_UN_M_MEMBER(A)                  TgMACRO_CONCAT4( A.m_m, GENERATE__VEC_DESC, _, TEMPLATE__VECTOR_COL )
    #define VEC_UN_1_MEMBER(A)                  TgMACRO_CONCAT3( A.m_v, GENERATE__VEC_DESC, _1 )
    #define VEC_UN_2_MEMBER(A)                  TgMACRO_CONCAT3( A.m_m, GENERATE__VEC_DESC, _2 )
    #define VEC_UN_3_MEMBER(A)                  TgMACRO_CONCAT3( A.m_m, GENERATE__VEC_DESC, _3 )
    #define VEC_UN_4_MEMBER(A)                  TgMACRO_CONCAT3( A.m_m, GENERATE__VEC_DESC, _4 )

    #define VEC_S_UN_M_MEMBER(A)                TgMACRO_CONCAT4( A.m_mS_, GENERATE__VEC_DESC, _, TEMPLATE__VECTOR_COL )
    #define VEC_S_UN_1_MEMBER(A)                TgMACRO_CONCAT3( A.m_vS_, GENERATE__VEC_DESC, _1 )
    #define VEC_S_UN_2_MEMBER(A)                TgMACRO_CONCAT3( A.m_mS_, GENERATE__VEC_DESC, _2 )
    #define VEC_S_UN_3_MEMBER(A)                TgMACRO_CONCAT3( A.m_mS_, GENERATE__VEC_DESC, _3 )
    #define VEC_S_UN_4_MEMBER(A)                TgMACRO_CONCAT3( A.m_mS_, GENERATE__VEC_DESC, _4 )

    #define VEC_UN_PTR_M_MEMBER(A)              TgMACRO_CONCAT4( A.m_pm, GENERATE__VEC_DESC, _, TEMPLATE__VECTOR_COL )
    #define VEC_UN_PTR_1_MEMBER(A)              TgMACRO_CONCAT3( A.m_pv, GENERATE__VEC_DESC, _1 )
    #define VEC_UN_PTR_2_MEMBER(A)              TgMACRO_CONCAT3( A.m_pm, GENERATE__VEC_DESC, _2 )
    #define VEC_UN_PTR_3_MEMBER(A)              TgMACRO_CONCAT3( A.m_pm, GENERATE__VEC_DESC, _3 )
    #define VEC_UN_PTR_4_MEMBER(A)              TgMACRO_CONCAT3( A.m_pm, GENERATE__VEC_DESC, _4 )

    #define VEC_S_UN_PTR_M_MEMBER(A)            TgMACRO_CONCAT4( A.m_pmS_, GENERATE__VEC_DESC, _, TEMPLATE__VECTOR_COL )
    #define VEC_S_UN_PTR_1_MEMBER(A)            TgMACRO_CONCAT3( A.m_pvS_, GENERATE__VEC_DESC, _1 )
    #define VEC_S_UN_PTR_2_MEMBER(A)            TgMACRO_CONCAT3( A.m_pmS_, GENERATE__VEC_DESC, _2 )
    #define VEC_S_UN_PTR_3_MEMBER(A)            TgMACRO_CONCAT3( A.m_pmS_, GENERATE__VEC_DESC, _3 )
    #define VEC_S_UN_PTR_4_MEMBER(A)            TgMACRO_CONCAT3( A.m_pmS_, GENERATE__VEC_DESC, _4 )



    #define VEC_DEC_T(...)                      MULTI_MACRO(VEC_DEC_T, __VA_ARGS__)
    #define VEC_DEC_T_1(T)                      TgMACRO_CONCAT3( T, _, GENERATE__VEC_DESC )
    #define VEC_DEC_T_2(T,COL)                  TgMACRO_CONCAT5( T, _, GENERATE__VEC_DESC,_,COL )
    #define VEC_DEC_T_3(T,COL,MOD)              TgMACRO_CONCAT7( T, _, GENERATE__VEC_DESC,_,COL,_,MOD )



    #define VEC_IS_NATIVE                       ((128 == TEMPLATE__TYPE_SIZE * TEMPLATE__VECTOR_DIM) && (32 >= TEMPLATE__TYPE_SIZE))
    #define VEC_T(...)                          MULTI_MACRO(VEC_T, __VA_ARGS__)
    #define VEC_T_1(COL)                        VEC_DEC_T_2(TgVEC,COL)
    #define VEC_T_2(COL,MOD)                    VEC_DEC_T_3(TgVEC,COL,MOD)

    #define VEC_K(...)                          MULTI_MACRO(VEC_K, __VA_ARGS__)
    #define VEC_K_1(K)                          VEC_DEC_T_2(K,1)
    #define VEC_K_2(K,COL)                      VEC_DEC_T_2(K,COL)

    #define FCN_V(...)                          MULTI_MACRO(FCN_V, __VA_ARGS__)
    #define FCN_V_1(F)                          TgMACRO_CONCAT5( F, _, GENERATE__VEC_DESC, _, 1 )
    #define FCN_V_2(F, COL)                     TgMACRO_CONCAT5( F, _, GENERATE__VEC_DESC, _, COL )



    #define VEC_S_T(...)                        MULTI_MACRO(VEC_S_T, __VA_ARGS__)
    #define VEC_S_T_1(COL)                      VEC_DEC_T_2(TgVEC_S,COL)
    #define VEC_S_T_2(COL,MOD)                  VEC_DEC_T_3(TgVEC_S,COL,MOD)

    #define VEC_UN_T(...)                       MULTI_MACRO(VEC_UN_T, __VA_ARGS__)
    #define VEC_UN_T_1(COL)                     VEC_DEC_T_2(TgVEC_UN,COL)
    #define VEC_UN_T_2(COL,MOD)                 VEC_DEC_T_3(TgVEC_UN,COL,MOD)

    #define VEC_UN_PTR_T(...)                   MULTI_MACRO(VEC_UN_PTR_T, __VA_ARGS__)
    #define VEC_UN_PTR_T_1(COL)                 VEC_DEC_T_2(TgVEC_UN_PTR,COL)
    #define VEC_UN_PTR_T_2(COL,MOD)             VEC_DEC_T_3(TgVEC_UN_PTR,COL,MOD)

    #define VEC_UN_CONST_PTR_T(...)             MULTI_MACRO(VEC_UN_CONST_PTR_T, __VA_ARGS__)
    #define VEC_UN_CONST_PTR_T_1(COL)           VEC_DEC_T_2(TgVEC_UN_CONST_PTR,COL)
    #define VEC_UN_CONST_PTR_T_2(COL,MOD)       VEC_DEC_T_3(TgVEC_UN_CONST_PTR,COL,MOD)



    #define VEC_OBJ_T(...)                      MULTI_MACRO(VEC_OBJ_T, __VA_ARGS__)
    #define VEC_OBJ_T_1(T)                      TgMACRO_CONCAT3( T, _, GENERATE__VEC_DESC )
    #define VEC_OBJ_T_2(T,MOD)                  TgMACRO_CONCAT5( T, _, GENERATE__VEC_DESC,_,MOD )

    #define FCN_VO(...)                         MULTI_MACRO(FCN_VO, __VA_ARGS__)
    #define FCN_VO_1(F)                         TgMACRO_CONCAT3( F, _, GENERATE__VEC_DESC )



    #define MAT_T(...)                          MULTI_MACRO(MAT_T, __VA_ARGS__)
    #define MAT_T_0()                           VEC_DEC_T_2(TgVEC,TEMPLATE__VECTOR_COL)
    #define MAT_T_1(MOD)                        VEC_DEC_T_3(TgVEC,TEMPLATE__VECTOR_COL,MOD)

    #define MAT_S_T(...)                        MULTI_MACRO(MAT_S_T, __VA_ARGS__)
    #define MAT_S_T_0()                         VEC_DEC_T_2(TgVEC_S,TEMPLATE__VECTOR_COL)
    #define MAT_S_T_1(MOD)                      VEC_DEC_T_3(TgVEC_S,TEMPLATE__VECTOR_COL,MOD)

    #define MAT_UN_T(...)                       MULTI_MACRO(MAT_UN_T, __VA_ARGS__)
    #define MAT_UN_T_0()                        VEC_DEC_T_2(TgVEC_UN,TEMPLATE__VECTOR_COL)
    #define MAT_UN_T_1(MOD)                     VEC_DEC_T_3(TgVEC_UN,TEMPLATE__VECTOR_COL,MOD)

    #define MAT_UN_PTR_T(...)                   MULTI_MACRO(MAT_UN_PTR_T, __VA_ARGS__)
    #define MAT_UN_PTR_T_0()                    VEC_DEC_T_2(TgVEC_UN_PTR,TEMPLATE__VECTOR_COL)
    #define MAT_UN_PTR_T_1(MOD)                 VEC_DEC_T_3(TgVEC_UN_PTR,TEMPLATE__VECTOR_COL,MOD)

    #define MAT_UN_CONST_PTR_T(...)             MULTI_MACRO(MAT_UN_CONST_PTR_T, __VA_ARGS__)
    #define MAT_UN_CONST_PTR_T_0()              VEC_DEC_T_2(TgVEC_UN_CONST_PTR,TEMPLATE__VECTOR_COL)
    #define MAT_UN_CONST_PTR_T_1(MOD)           VEC_DEC_T_3(TgVEC_UN_CONST_PTR,TEMPLATE__VECTOR_COL,MOD)

    #define FCN_M(A)                            FCN_V(A,TEMPLATE__VECTOR_COL)



    #define FCNI_PRIM_0                         TgMACRO_CONCAT4( TEMPLATE__PRIM_0, TEMPLATE__PRIM_0_CAP_0, TEMPLATE__PRIM_0_CAP_1, _ )
#if defined(TEMPLATE__PRIM_1)
    #define FCNI_PRIM_1                         TgMACRO_CONCAT5( _, TEMPLATE__PRIM_1, TEMPLATE__PRIM_1_CAP_0, TEMPLATE__PRIM_1_CAP_1, _ )
#else
    #define FCNI_PRIM_1                         _
#endif
    #define FCNI_VO(...)                        MULTI_MACRO(FCNI_VO, __VA_ARGS__)
    #define FCNI_VO_1(FCN_A)                    TgMACRO_CONCAT4( FCN_A, _, FCNI_PRIM_0, GENERATE__VEC_DESC )
    #define FCNI_VO_2(FCN_A,FCN_B)              TgMACRO_CONCAT6( FCN_A, _, FCNI_PRIM_0, FCN_B, FCNI_PRIM_1, GENERATE__VEC_DESC )



#else

    /* MACROS defined in this file */

    #undef FCN_C                                /**< Function decorator for C standard functions */


    /* Scalar */

    #undef VAR_T                                /**< The generator type and the base scalar value used for the vector type generation */
    #undef VAR_T_0                              /**< Zero parameters - No modifiers */
    #undef VAR_T_1                              /**< First parameter - Type Modifiers (default is none) */

    #undef UVAR_T                               /**< Unsigned integer type matching the generator type when it is also an integer  */
    #undef UVAR_T_0                             /**< Zero parameters - No modifiers */
    #undef UVAR_T_1                             /**< First parameter - Type Modifiers (default is none) */

    #undef TYPE_K                               /**< Used to instantiate a constant (literal) value of the matching type */
    #undef TYPE_K_1                             /**< First parameter - integer (whole) value */
    #undef TYPE_K_2                             /**< Second parameter - Fractional (decimal) value */

    #undef VAR_K                                /**< Used to reference an existing constant value whose name matches the code standard */
    #undef FCN_F                                /**< Function decorator for functions matching the generator type using the coding standard
                                                    These macros are only valid when generating signed integer code */
    #undef UVAR_K                               /**< Used to reference an existing unsigned constant value whose name matches the code standard */
    #undef UFCN_F                               /**< Function decorator for functions matching an unsigned version of the generator type using the coding standard */
    #undef UTYPE_K                              /**< Used to instantiate a constant (literal) value of an unsigned matching type */
    #undef UVAR_MASK                            /**< Unsigned maximum value (all bits set) matching the size of the generation type  */



    /* Union Accessors*/

    #undef VEC_UN_M_MEMBER
    #undef VEC_UN_1_MEMBER
    #undef VEC_UN_2_MEMBER
    #undef VEC_UN_3_MEMBER
    #undef VEC_UN_4_MEMBER

    #undef VEC_S_UN_M_MEMBER
    #undef VEC_S_UN_1_MEMBER
    #undef VEC_S_UN_2_MEMBER
    #undef VEC_S_UN_3_MEMBER
    #undef VEC_S_UN_4_MEMBER

    #undef VEC_UN_PTR_M_MEMBER
    #undef VEC_UN_PTR_1_MEMBER
    #undef VEC_UN_PTR_2_MEMBER
    #undef VEC_UN_PTR_3_MEMBER
    #undef VEC_UN_PTR_4_MEMBER

    #undef VEC_S_UN_PTR_M_MEMBER
    #undef VEC_S_UN_PTR_1_MEMBER
    #undef VEC_S_UN_PTR_2_MEMBER
    #undef VEC_S_UN_PTR_3_MEMBER
    #undef VEC_S_UN_PTR_4_MEMBER



    /* Vector (single row) */

    #undef VEC_DEC_T                            /**< Used to instantiate types that use vectors - must have one or two parameters */
    #undef VEC_DEC_T_1                          /**< First parameter - The object type */
    #undef VEC_DEC_T_2                          /**< Second parameter - Number of columns (default is none) */
    #undef VEC_DEC_T_3                          /**< Third parameter - Type Modifiers (default is none) */

    #undef VEC_IS_NATIVE                        /**< Used to indicate if the current default vector type is native for the hardware */
    #undef VEC_T                                /**< Used to instantiate a native vector - must have one or two parameters */
    #undef VEC_T_1                              /**< First parameter - Number of rows (vectors) */
    #undef VEC_T_2                              /**< Second parameter - Type Modifiers (default is none) */

    #undef VEC_K                                /**< Used to instantiate a constant (literal) value of the matching type */
    #undef VEC_K_1                              /**< First parameter - Name of constant to be modified */
    #undef VEC_K_2                              /**< Second parameter - Number of rows in the vector type (default is 1) */

    #undef FCN_V                                /**< Function decorator for functions matching the generator type and vector dimension using the coding standard */
    #undef FCN_V_1                              /**< First parameter - Name of the function */
    #undef FCN_V_2                              /**< Second parameter - Number of vector rows */

    #undef VEC_S_T                              /**< Used to instantiate a scalar vector - must have one or two parameters */
    #undef VEC_S_T_1                            /**< First parameter - Number of rows (vectors) */
    #undef VEC_S_T_2                            /**< Second parameter - Type Modifiers (default is none) */

    #undef VEC_UN_T                             /**< Used to instantiate a vector union - must have one or two parameters */
    #undef VEC_UN_T_1                           /**< First parameter - Number of rows (vectors) */
    #undef VEC_UN_T_2                           /**< Second parameter - Type Modifiers (default is none) */

    #undef VEC_UN_PTR_T                         /**< Used to instantiate a vector union - must have one or two parameters */
    #undef VEC_UN_PTR_T_0                       /**< First parameter - Number of rows (vectors) */
    #undef VEC_UN_PTR_T_1                       /**< Second parameter - Type Modifiers (default is none) */

    #undef VEC_UN_CONST_PTR_T                   /**< Used to instantiate a vector union - must have one or two parameters */
    #undef VEC_UN_CONST_PTR_T_0                 /**< First parameter - Number of rows (vectors) */
    #undef VEC_UN_CONST_PTR_T_1                 /**< Second parameter - Type Modifiers (default is none) */



    /* Generic Objects using Vectors */

    #undef VEC_OBJ_T                            /**< Used to instantiate types that use vectors - must have one or two parameters */
    #undef VEC_OBJ_T_1                          /**< First parameter - The object type */
    #undef VEC_OBJ_T_2                          /**< Second parameter - Number of columns (default is none) */
    #undef VEC_OBJ_T_3                          /**< Third parameter - Type Modifiers (default is none) */

    #undef FCN_VO                               /**< Function decorator for functions matching the generator type and vector dimension using the coding standard */
    #undef FCN_VO_1                             /**< First parameter - Name of the function */



    /* Matrices (multi-row vectors) */

    #undef MAT_T                                /**< Used to instantiate a native matrix - must have one or two parameters */
    #undef MAT_T_0                              /**< No parameter - Default number of rows for the generator used */
    #undef MAT_T_1                              /**< First parameter - Type modifiers */

    #undef MAT_S_T                              /**< Used to instantiate a scalar matrix - must have one or two parameters */
    #undef MAT_S_T_0                            /**< No parameter - Default number of rows for the generator used */
    #undef MAT_S_T_1                            /**< First parameter - Type modifiers */

    #undef MAT_UN_T                             /**< Used to instantiate a matrix union - must have one or two parameters */
    #undef MAT_UN_T_0                           /**< No parameter - Default number of rows for the generator used */
    #undef MAT_UN_T_1                           /**< First parameter - Type modifiers */

    #undef MAT_UN_PTR_T                         /**< Used to instantiate a matrix union - must have one or two parameters */
    #undef MAT_UN_PTR_T_0                       /**< No parameter - Default number of rows for the generator used */
    #undef MAT_UN_PTR_T_1                       /**< First parameter - Type modifiers */

    #undef MAT_UN_CONST_PTR_T                   /**< Used to instantiate a matrix union - must have one or two parameters */
    #undef MAT_UN_CONST_PTR_T_0                 /**< No parameter - Default number of rows for the generator used */
    #undef MAT_UN_CONST_PTR_T_1                 /**< First parameter - Type modifiers */

    #undef FCN_M



    /* Linear function expanders */

    #undef FCNI_PRIM_0
    #undef FCNI_PRIM_1
    #undef FCNI_VO
    #undef FCNI_VO_1
    #undef FCNI_VO_2



    /* Macros used in the process of creating the generation macros */

    #undef GENERATE__UNLOAD_TEMPLATE_MACROS
    #undef GENERATE__TYPE_SIZE_TEXT             /* number of bits in the generator type, with a leading zero attached for a minimum size of 2 characters */
    #undef GENERATE__TYPE_SYMBOL                /* coding standard symbol for the type - S for signed integer, U for unsigned integer, F for floating point */
    #undef GENERATE__VEC_ASSIGN_EQN
    #undef GENERATE__VECTOR_DIM_BREAK_LZ
    #undef GENERATE__MAT_ASSIGN
    #undef GENERATE__VEC_DESC
    #undef GENERATE__VEC_UVAR_DESC


    /* MACROS defined in including file (inputs) */

    #if !defined(ENABLE_RELOAD_GUARD)
        #undef TEMPLATE__TYPE_SIZE
        #undef TEMPLATE__OVERRIDE_INT_TYPE
        #undef TEMPLATE__VECTOR_DIM
        #undef TEMPLATE__VECTOR_COL

        #undef TEMPLATE__PRIM_0_CAP_0
        #undef TEMPLATE__PRIM_0_CAP_1
        #undef TEMPLATE__PRIM_0
        #undef TEMPLATE__PRIM_1_CAP_0
        #undef TEMPLATE__PRIM_1_CAP_1
        #undef TEMPLATE__PRIM_1
    #endif

#endif
