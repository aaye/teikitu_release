# 015482FC-A4BD-4E1C-AE49-A30E5728D73A
CMAKE_MINIMUM_REQUIRED(VERSION 3.27)
CMAKE_POLICY(VERSION 3.27)
SET (CMAKE_OBJECT_PATH_MAX 1024)

INCLUDE (ExternalProject)


# ========================================================================================================================================================================================================
#  FIND GIT
# ========================================================================================================================================================================================================

FIND_PACKAGE (Git) #======================================================================================================================================================================================
IF (GIT_FOUND)
    EXECUTE_PROCESS(
      COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
      OUTPUT_VARIABLE GIT_BRANCH
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    EXECUTE_PROCESS(
      COMMAND ${GIT_EXECUTABLE} rev-parse --show-toplevel
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
      OUTPUT_VARIABLE GIT_ROOT_PATH
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
ELSE ()
    MESSAGE (FATAL_ERROR "Could not discover the git. Required for the script to work")
ENDIF ()

IF (NOT GIT_ROOT_PATH)
    MESSAGE (FATAL_ERROR "Could not discover the git repo root. Required for the script to work")
ENDIF ()


# ========================================================================================================================================================================================================
#  CONFIGURATION
# ========================================================================================================================================================================================================

# Base language overrides
SET (CMAKE_USER_MAKE_RULES_OVERRIDE ${GIT_ROOT_PATH}/cmake/flag_overrides.cmake)

# Project Configurations
SET (CMAKE_CONFIGURATION_TYPES Debug Release Final Tools )
SET (CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Reset the configurations to what we need" FORCE )

# Generation the solution name for the project
IF (CMAKE_GENERATOR MATCHES "Visual Studio.*")
    PROJECT ("Teikitu Superbuild" LANGUAGES CXX DESCRIPTION "Teikitu Superbuild" HOMEPAGE_URL "https://github.com/aaye/teikitu_release")
ELSE ()
    PROJECT ("Teikitu Superbuild" LANGUAGES C DESCRIPTION "Teikitu Superbuild" HOMEPAGE_URL "https://github.com/aaye/teikitu_release")
ENDIF ()
INCLUDE(${GIT_ROOT_PATH}/cmake/cmake_config.cmake) # =====================================================================================================================================================
INCLUDE(${GIT_ROOT_PATH}/cmake/cmake_macros.cmake) # =====================================================================================================================================================

SET_APPEND_MSVC_COMPILER_OPTION (CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS CMAKE_CXX_FLAGS std:c++20 EHsc)
APPEND_GNU_COMPILER_OPTION (CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS std=c++20 D_CRT_SECURE_NO_WARNINGS)
APPEND_GNU_DISABLE_WARNING( CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS unused-function unused-command-line-argument deprecated-declarations deprecated-non-prototype strict-prototypes macro-redefined)

SET_APPEND_MSVC_COMPILER_OPTION (CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS CMAKE_C_FLAGS std:c17)
APPEND_GNU_COMPILER_OPTION (CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS std=c17 D_CRT_SECURE_NO_WARNINGS)
APPEND_GNU_DISABLE_WARNING( CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS unused-function unused-command-line-argument deprecated-declarations deprecated-non-prototype strict-prototypes macro-redefined)

IF (MK_BUILD__HARDWARE__X64)
    APPEND_GNU_COMPILER_OPTION (CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS march=x86-64-v2)
    APPEND_GNU_COMPILER_OPTION (CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS march=x86-64-v2)
ENDIF ()

MESSAGE (STATUS "         BINARY DIR: ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}")
MESSAGE (STATUS "        INSTALL DIR: ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}")
MESSAGE (STATUS "          BUILD DIR: ${CMAKE_BINARY_DIR}")
MESSAGE (STATUS "EXTERNAL BUILD TYPE: ${CMAKE_BUILD_TYPE_EXTERNAL}")
MESSAGE (STATUS "     MK_BUILD__LIST: ${MK_BUILD__LIST}")
MESSAGE (STATUS "            C FLAGS: ${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}")
MESSAGE (STATUS "          CXX FLAGS: ${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}")

LIST (APPEND CMAKE_MODULE_PATH ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY})


# ========================================================================================================================================================================================================
#  EXTERNAL PROJECT - COMMON
# ========================================================================================================================================================================================================

IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("DIRECTX" IN_LIST MK_BUILD__LIST) OR (("TEIKITU" IN_LIST MK_BUILD__LIST) AND ("${MK_BUILD__GRAPHICS_NAME}" STREQUAL "DX12")))
    EXTERNALPROJECT_ADD( DIRECTX_HEADERS_EXTERNAL #=======================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/directx/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}directx/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/microsoft/DirectX-Headers.git
        GIT_TAG                         MAIN
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  ""

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DDXHEADERS_BUILD_TEST:BOOL=OFF
                                        -DDXHEADERS_BUILD_GOOGLE_TEST:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    # Once we have downloaded the repo, create a branch and patch it.
    ExternalProject_Add_Step(
        DIRECTX_HEADERS_EXTERNAL DIRECTX_SWITCH_AND_PATCH
        COMMAND ${CMAKE_COMMAND} -P ${GIT_ROOT_PATH}/teikitu_external/DirectX_Patch.cmake
        WORKING_DIRECTORY ${GIT_ROOT_PATH}/teikitu_external
        DEPENDEES download
        DEPENDERS configure
        INDEPENDENT TRUE
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("ZLIB" IN_LIST MK_BUILD__LIST) OR ("TIFF" IN_LIST MK_BUILD__LIST) OR ("TEIKITU" IN_LIST MK_BUILD__LIST))
    SET_APPEND_GNU_COMPILER_OPTION( CMAKE_CXX_FLAGS_FOR_ZLIB CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS)
    SET_APPEND_GNU_COMPILER_OPTION( CMAKE_C_FLAGS_FOR_ZLIB CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS)

    EXTERNALPROJECT_ADD( ZLIB_EXTERNAL #==================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/zlib/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}zlib/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/intel/zlib.git
        GIT_TAG                         v1.2.13
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_ZLIB}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_ZLIB}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("ZSTD" IN_LIST MK_BUILD__LIST) OR ("TIFF" IN_LIST MK_BUILD__LIST) OR ("TEIKITU" IN_LIST MK_BUILD__LIST))
    SET_APPEND_GNU_COMPILER_OPTION( CMAKE_C_FLAGS_FOR_ZSTD CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS)

    EXTERNALPROJECT_ADD( ZSTD_EXTERNAL #==================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/zstd/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}zstd/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/facebook/zstd.git
        GIT_TAG                         release
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_ZSTD}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

        SOURCE_SUBDIR                   build/cmake
        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("LIBDEFLATE" IN_LIST MK_BUILD__LIST) OR ("TIFF" IN_LIST MK_BUILD__LIST) OR ("OPENEXR" IN_LIST MK_BUILD__LIST) OR ("TEIKITU" IN_LIST MK_BUILD__LIST))
    SET_APPEND_MSVC_COMPILER_OPTION( CMAKE_C_FLAGS_FOR_LIBDEFLATE CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS wd4113)

    EXTERNALPROJECT_ADD( LIBDEFLATE_EXTERNAL #============================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/libdeflate/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}libdeflate/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/ebiggers/libdeflate.git
        GIT_TAG                         v1.18
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_LIBDEFLATE}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DLIBDEFLATE_BUILD_SHARED_LIB:BOOL=OFF
                                        -DLIBDEFLATE_BUILD_TESTS:BOOL=OFF
                                        -DLIBDEFLATE_BUILD_GZIP:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("TIFF" IN_LIST MK_BUILD__LIST) OR ("TEIKITU" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( TIFF_EXTERNAL #==================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/tiff/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}tiff/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://gitlab.com/libtiff/libtiff.git
        GIT_TAG                         MASTER
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  ""

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DBUILD_SHARED_LIBS:BOOL=OFF
                                        -Dtiff-tools:BOOL=OFF
                                        -Dtiff-tests:BOOL=OFF
                                        -Dtiff-contrib:BOOL=OFF
                                        -Dtiff-docs:BOOL=OFF
                                        -Dcxx:BOOL=OFF
                                        -Dwin32-io:BOOL=OFF
                                        -Dunix-io:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    ExternalProject_Add_StepDependencies (TIFF_EXTERNAL configure LIBDEFLATE_EXTERNAL)
    ExternalProject_Add_StepDependencies (TIFF_EXTERNAL configure ZLIB_EXTERNAL)
    ExternalProject_Add_StepDependencies (TIFF_EXTERNAL configure ZSTD_EXTERNAL)

    # Once we have downloaded the repo, create a branch and patch it.
    ExternalProject_Add_Step(
        TIFF_EXTERNAL TIFF_SWITCH_AND_PATCH
        COMMAND ${CMAKE_COMMAND} -P ${GIT_ROOT_PATH}/teikitu_external/TIFF_Patch.cmake
        WORKING_DIRECTORY ${GIT_ROOT_PATH}/teikitu_external
        DEPENDEES download
        DEPENDERS configure
        INDEPENDENT TRUE
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("MIMALLOC" IN_LIST MK_BUILD__LIST) OR ("TEIKITU" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( MIMALLOC_EXTERNAL #==============================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/mimalloc/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}mimalloc/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/microsoft/mimalloc.git
        GIT_TAG                         master
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DMI_USE_CXX:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    # Once we have downloaded the repo, create a branch and patch it.
    ExternalProject_Add_Step(
        MIMALLOC_EXTERNAL MIMALLOC_SWITCH_AND_PATCH
        COMMAND ${CMAKE_COMMAND} -P ${GIT_ROOT_PATH}/teikitu_external/MiMalloc_Patch.cmake
        WORKING_DIRECTORY ${GIT_ROOT_PATH}/teikitu_external
        DEPENDEES download
        DEPENDERS configure
        INDEPENDENT TRUE
    )
ENDIF ()


# ========================================================================================================================================================================================================
#  EXTERNAL PROJECT - TOOLS - OPEN EXR
# ========================================================================================================================================================================================================

IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("IMATH" IN_LIST MK_BUILD__LIST) OR ("OPENEXR" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( IMATH_EXTERNAL #=================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/imath/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}imath/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/AcademySoftwareFoundation/Imath.git
        GIT_TAG                         v3.1.9
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DPYTHON:BOOL=OFF
                                        -DBUILD_DOCS:BOOL=OFF
                                        -DIMATH_INSTALL_PKG_CONFIG:BOOL=ON
                                        -DBUILD_SHARED_LIBS:BOOL=OFF
                                        -DBUILD_TESTING:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("IMATH" IN_LIST MK_BUILD__LIST) OR ("OPENEXR" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    SET_APPEND_MSVC_COMPILER_OPTION( CMAKE_CXX_FLAGS_FOR_OPENEXR CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS D_SILENCE_CXX20_OLD_SHARED_PTR_ATOMIC_SUPPORT_DEPRECATION_WARNING wd4113)
    APPEND_GNU_COMPILER_OPTION( CMAKE_CXX_FLAGS_FOR_OPENEXR D_SILENCE_CXX20_OLD_SHARED_PTR_ATOMIC_SUPPORT_DEPRECATION_WARNING)

    EXTERNALPROJECT_ADD( OPENEXR_EXTERNAL #===============================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/openexr/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}openexr/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/AcademySoftwareFoundation/openexr.git
        GIT_TAG                         release
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}
                                        -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

                                        -DPKG_CONFIG_USE_CMAKE_PREFIX_PATH=ON
                                        -DOPENEXR_FORCE_INTERNAL_DEFLATE=ON # Windows does not natively support pkg_check_modules

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_OPENEXR}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DOPENEXR_INSTALL_TOOLS:BOOL=OFF
                                        -DOPENEXR_INSTALL_EXAMPLES:BOOL=OFF
                                        -DOPENEXR_INSTALL_DOCS:BOOL=OFF
                                        -DBUILD_WEBSITE:BOOL=OFF
                                        -DOPENEXR_BUILD_PYTHON:BOOL=OFF
                                        -DBUILD_TESTING:BOOL=OFF
                                        -DOPENEXR_INSTALL_PKG_CONFIG:BOOL=ON
                                        -DOPENEXR_BUILD_TOOLS:BOOL=OFF
                                        -DBUILD_SHARED_LIBS:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    ExternalProject_Add_StepDependencies (OPENEXR_EXTERNAL configure IMATH_EXTERNAL)
    ExternalProject_Add_StepDependencies (OPENEXR_EXTERNAL configure LIBDEFLATE_EXTERNAL)
ENDIF ()


# ========================================================================================================================================================================================================
#  EXTERNAL PROJECT - TOOLS - OPEN USD
# ========================================================================================================================================================================================================

IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("ONEAPI" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    SET_APPEND_GNU_COMPILER_OPTION (CMAKE_CXX_FLAGS_FOR_ONEAPI CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS)
    EXTERNALPROJECT_ADD( ONEAPI_EXTERNAL #================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/oneapi/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}oneapi/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/oneapi-src/oneTBB.git
        GIT_TAG                         v2021.9.0
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_ONEAPI}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DTBB_TEST:BOOL=OFF
                                        -DTBB_EXAMPLES:BOOL=OFF
                                        -DTBBMALLOC_BUILD:BOOL=OFF
                                        -DBUILD_SHARED_LIBS:BOOL=OFF

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("BOOST" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    SET_APPEND_MSVC_COMPILER_OPTION( CMAKE_CXX_FLAGS_FOR_BOOST CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS wd4245 wd4005)

    EXTERNALPROJECT_ADD( BOOST_EXTERNAL #=================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/boost/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}boost/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/boostorg/boost.git
        GIT_TAG                         boost-1.83.0
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_BOOST}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DBOOST_ENABLE_PYTHON:BOOL=ON

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("GLFW" IN_LIST MK_BUILD__LIST) OR ("OPENSUBDIV" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( GLFW_EXTERNAL #==================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/glfw/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}glfw/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/glfw/glfw.git
        GIT_TAG                         3.3.8
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("OPENSUBDIV" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( OPENSUBDIV_EXTERNAL #============================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/opensubdiv/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}opensubdiv/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/PixarAnimationStudios/OpenSubdiv.git
        GIT_TAG                         release
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DNO_EXAMPLES:BOOL=ON         # disable examples build
                                        -DNO_TUTORIALS:BOOL=ON        # disable tutorials build
                                        -DNO_REGRESSION:BOOL=ON       # disable regression tests build
                                        -DNO_PTEX:BOOL=ON             # disable PTex support
                                        -DNO_DOC:BOOL=ON              # disable documentation build
                                        -DNO_OMP:BOOL=ON              # disable OpenMP
                                        -DNO_TBB:BOOL=ON              # disable TBB
                                        -DNO_CUDA:BOOL=ON             # disable CUDA
                                        -DNO_OPENCL:BOOL=ON           # disable OpenCL
                                        -DNO_CLEW:BOOL=ON             # disable CLEW wrapper library
                                        -DNO_METAL:BOOL=ON            # disable Metal
                                        -DNO_DX:BOOL=ON               # disable DirectX

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    ExternalProject_Add_StepDependencies (OPENSUBDIV_EXTERNAL configure GLFW_EXTERNAL)
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("ONEAPI" IN_LIST MK_BUILD__LIST) OR ("OPENUSD" IN_LIST MK_BUILD__LIST))
    SET_APPEND_MSVC_COMPILER_OPTION( CMAKE_CXX_FLAGS_FOR_OPENUSD CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS wd4996)
    APPEND_GNU_DISABLE_WARNING( CMAKE_CXX_FLAGS_FOR_OPENUSD self-assign-overloaded)

    EXTERNALPROJECT_ADD( OPENUSD_EXTERNAL #===============================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/openusd/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}openusd/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/PixarAnimationStudios/OpenUSD.git
        GIT_TAG                         v23.08
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

    #                                   -DPXR_MALLOC_LIBRARY:path=/usr/local/lib/libjemalloc.so

                                        -DTBB_INCLUDE_DIR=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}/include/
                                        -DTBB_LIBRARY=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}lib/

                                        -DBoost_ROOT=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

                                        -DOPENSUBDIV_ROOT_DIR=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_OPENUSD}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

                                        -DBoost_NO_BOOST_CMAKE:BOOL=OFF
                                        -DPXR_ENABLE_ONEAPI_TBB:BOOL=ON

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    # Once we have downloaded the repo, create a branch and patch it.
    ExternalProject_Add_Step(
        OPENUSD_EXTERNAL OPENUSD_SWITCH_AND_PATCH
        COMMAND ${CMAKE_COMMAND} -P ${GIT_ROOT_PATH}/teikitu_external/OpenUSD_Patch.cmake
        WORKING_DIRECTORY ${GIT_ROOT_PATH}/teikitu_external
        DEPENDEES download
        DEPENDERS configure
        INDEPENDENT TRUE
    )

    ExternalProject_Add_StepDependencies (OPENUSD_EXTERNAL configure MIMALLOC_EXTERNAL)
    ExternalProject_Add_StepDependencies (OPENUSD_EXTERNAL configure ONEAPI_EXTERNAL)
    ExternalProject_Add_StepDependencies (OPENUSD_EXTERNAL configure OPENEXR_EXTERNAL)
    ExternalProject_Add_StepDependencies (OPENUSD_EXTERNAL configure BOOST_EXTERNAL)
    ExternalProject_Add_StepDependencies (OPENUSD_EXTERNAL configure OPENSUBDIV_EXTERNAL)
ENDIF ()


# ========================================================================================================================================================================================================
#  FETCH ASSETS
# ========================================================================================================================================================================================================

EXTERNALPROJECT_ADD( ASSETS_EXTERNAL #====================================================================================================================================================================
    SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_assets/
    GIT_REPOSITORY                  https://github.com/aaye/teikitu_assets.git
    GIT_TAG                         main
    GIT_SHALLOW                     TRUE
    GIT_PROGRESS                    FALSE
    GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT
    CONFIGURE_COMMAND               ""
    BUILD_COMMAND                   ""
    INSTALL_COMMAND                 ""
    TEST_COMMAND                    ""
    TEST_AFTER_INSTALL              0
    DOWNLOAD_NO_PROGRESS            1
    LOG_DOWNLOAD                    1
    LOG_UPDATE                      1
    LOG_CONFIGURE                   1
    LOG_BUILD                       1
    LOG_INSTALL                     1
    LOG_MERGED_STDOUTERR            1
    LOG_OUTPUT_ON_FAILURE           1
)

#https://github.com/AcademySoftwareFoundation/openexr-images/blob/df16e765fee28a947244657cae3251959ae63c00/TestImages/WideColorGamut.exr


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("DIRECTX" IN_LIST MK_BUILD__LIST) OR (("TEIKITU" IN_LIST MK_BUILD__LIST) AND ("${MK_BUILD__GRAPHICS_NAME}" STREQUAL "DX12")))
    EXTERNALPROJECT_ADD( DIRECTX_AGILE_EXTERNAL #=========================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_directx_agile
        URL                             https://www.nuget.org/api/v2/package/Microsoft.Direct3D.D3D12/1.610.5
        CONFIGURE_COMMAND               ""
        BUILD_COMMAND                   ""
        INSTALL_COMMAND                 ""
        TEST_COMMAND                    ""
        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1
        LOG_DOWNLOAD                    1
        LOG_UPDATE                      1
        LOG_CONFIGURE                   1
        LOG_BUILD                       1
        LOG_INSTALL                     1
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )
ENDIF ()


# ========================================================================================================================================================================================================
#  TEIKITU
# ========================================================================================================================================================================================================

IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("TEIKITU" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( TEIKITU_EXTERNAL #===============================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_private/
        BINARY_DIR                      ${CMAKE_BINARY_DIR}/teikitu/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        DOWNLOAD_COMMAND                ""

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}

        CMAKE_CACHE_ARGS                -DMK_BUILD__THREAD:STRING=${MK_BUILD__THREAD}
                                        -DMK_BUILD__UNIVERSAL:STRING=${MK_BUILD__UNIVERSAL}
                                        -DMK_BUILD__OS:STRING=${MK_BUILD__OS}
                                        -DMK_BUILD__DEVICE:STRING=${MK_BUILD__DEVICE}
                                        -DMK_BUILD__TARGET_HARDWARE:STRING=${MK_BUILD__TARGET_HARDWARE}
                                        -DMK_BUILD__AUTOMATION:STRING=${MK_BUILD__AUTOMATION}
                                        -DMK_FEATURE__GRAPHICS:STRING=${MK_FEATURE__GRAPHICS}
                                        -DMK_FEATURE__AUDIO:STRING=${MK_FEATURE__AUDIO}
                                        -DMK_COMPILE_PLATFORM_TEXT__WIDE:STRING=${MK_COMPILE_PLATFORM_TEXT__WIDE}

                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    IF (("DIRECTX" IN_LIST MK_BUILD__LIST) OR ("${MK_BUILD__GRAPHICS_NAME}" STREQUAL "DX12"))
        ExternalProject_Add_StepDependencies (TEIKITU_EXTERNAL configure DIRECTX_HEADERS_EXTERNAL)
        ExternalProject_Add_StepDependencies (TEIKITU_EXTERNAL configure DIRECTX_AGILE_EXTERNAL)
    ENDIF ()
    ExternalProject_Add_StepDependencies (TEIKITU_EXTERNAL configure TIFF_EXTERNAL)
    ExternalProject_Add_StepDependencies (TEIKITU_EXTERNAL configure MIMALLOC_EXTERNAL)
    #ExternalProject_Add_StepDependencies (TEIKITU_EXTERNAL configure OPENEXR_EXTERNAL)

ENDIF ()


# ========================================================================================================================================================================================================
#  DOCUMENTATION
# ========================================================================================================================================================================================================

IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("ICONV" IN_LIST MK_BUILD__LIST) OR ("DOXYGEN" IN_LIST MK_BUILD__LIST))
    EXTERNALPROJECT_ADD( ICONV_EXTERNAL #=================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/iconv/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}iconv/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/sys-bio/iconv.git
        GIT_TAG                         master
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given that the last upate was in 2020

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_INSTALL_LIBDIR=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}lib/
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_FLEXBISON}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_FLEXBISON}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    # Once we have downloaded the repo, create a branch and patch it.
    ExternalProject_Add_Step(
        ICONV_EXTERNAL ICONV_SWITCH_AND_PATCH
        COMMAND ${CMAKE_COMMAND} -P ${GIT_ROOT_PATH}/teikitu_external/IconV_Patch.cmake
        WORKING_DIRECTORY ${GIT_ROOT_PATH}/teikitu_external
        DEPENDEES download
        DEPENDERS configure
        INDEPENDENT TRUE
    )
ENDIF ()


IF (("ALL" IN_LIST MK_BUILD__LIST) OR ("DOXYGEN" IN_LIST MK_BUILD__LIST))
    SET_APPEND_MSVC_COMPILER_OPTION( CMAKE_CXX_FLAGS_FOR_DOXYGEN CMAKE_CXX_FLAGS_FOR_EXTERNAL_PROJECTS W0)
    APPEND_GNU_DISABLE_WARNING( CMAKE_CXX_FLAGS_FOR_DOXYGEN everything language-extension-token misleading-indentation)

    SET_APPEND_MSVC_COMPILER_OPTION( CMAKE_C_FLAGS_FOR_DOXYGEN CMAKE_C_FLAGS_FOR_EXTERNAL_PROJECTS W0)
    APPEND_GNU_DISABLE_WARNING( CMAKE_C_FLAGS_FOR_DOXYGEN everything language-extension-token misleading-indentation)

    EXTERNALPROJECT_ADD( DOXYGEN_EXTERNAL #===================================================================================================================================================================
        SOURCE_DIR                      ${GIT_ROOT_PATH}/teikitu_external/_repo_clone/doxygen/
        BINARY_DIR                      ${MK_BUILD__EXTERNAL_BUILD_DIRECTORY}doxygen/
        INSTALL_DIR                     ${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}

        GIT_REPOSITORY                  https://github.com/doxygen/doxygen.git
        GIT_TAG                         Release_1_9_8
        GIT_SHALLOW                     TRUE
        GIT_PROGRESS                    FALSE
        GIT_REMOTE_UPDATE_STRATEGY      REBASE_CHECKOUT

        UPDATE_COMMAND                  "" # No need to update the repo given we are pulling a specific version tag

        CMAKE_ARGS                      -DCMAKE_INSTALL_PREFIX=${MK_BUILD__EXTERNAL_INSTALL_DIRECTORY}
                                        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE_EXTERNAL}

                                        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                        -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}
                                        -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}
                                        -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}

                                        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                                        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
                                        -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
                                        -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}

        CMAKE_CACHE_ARGS                -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS_FOR_DOXYGEN}
                                        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS_FOR_DOXYGEN}
                                        -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}
                                        -DCMAKE_REQUIRED_QUIET:BOOL=OFF

                                        -Dbuild_app:BOOL=ON

        TEST_AFTER_INSTALL              0
        DOWNLOAD_NO_PROGRESS            1

        LOG_DOWNLOAD                    ${MK_BUILD__LOG_TO_FILE}
        LOG_UPDATE                      ${MK_BUILD__LOG_TO_FILE}
        LOG_CONFIGURE                   ${MK_BUILD__LOG_TO_FILE}
        LOG_BUILD                       ${MK_BUILD__LOG_TO_FILE}
        LOG_INSTALL                     ${MK_BUILD__LOG_TO_FILE}
        LOG_MERGED_STDOUTERR            1
        LOG_OUTPUT_ON_FAILURE           1
    )

    ExternalProject_Add_StepDependencies (DOXYGEN_EXTERNAL configure ICONV_EXTERNAL)

    # Once we have downloaded the repo, create a branch and patch it.
    ExternalProject_Add_Step(
        DOXYGEN_EXTERNAL DOXYGEN_SWITCH_AND_PATCH
        COMMAND ${CMAKE_COMMAND} -P ${GIT_ROOT_PATH}/teikitu_external/Doxygen_Patch.cmake
        WORKING_DIRECTORY ${GIT_ROOT_PATH}/teikitu_external
        DEPENDEES download
        DEPENDERS configure
        INDEPENDENT TRUE
    )
ENDIF ()
