name: Ninja Clang

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  matrix:
    name: Generate test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        shell: pwsh
        # Use a small PowerShell script to generate the test matrix
        run: "& .github/workflows/create-test-matrix.ps1"




  run-matrix-clang:
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}
    name: "NINJA CLANG ${{ matrix.job_name }}"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install dependencies on windows
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install ninja cmake llvm
          ninja --version
          cmake --version
        # cmd "${{ matrix.config.environment_script }}"
        
      - uses: actions/checkout@v3
      - name: Build with OS Wide
        if: startsWith(matrix.os, 'windows')
        working-directory: ./teikitu/prj
        shell: pwsh
        run: .\windows_terminal_build_cmake_command.ps1 -IDE:Ninja -COMPILER:CLANG -BUILD -CLEAN -OS_WIDE -GITHUB -CPU:${{ matrix.cmake_cpu }} -THREAD:${{ matrix.cmake_thread }} -OS:${{ matrix.cmake_os }} -DEVICE:${{ matrix.cmake_device }} -GPU:${{ matrix.cmake_gpu }} -AUDIO:${{ matrix.cmake_audio }} -BUILD_TYPE:${{ matrix.cmake_type }}

      - name: Build with OS Narrow
        if: startsWith(matrix.os, 'windows')
        working-directory: ./teikitu/prj
        shell: pwsh
        run: .\windows_terminal_build_cmake_command.ps1 -IDE:Ninja -COMPILER:CLANG -BUILD -CLEAN -GITHUB -CPU:${{ matrix.cmake_cpu }} -THREAD:${{ matrix.cmake_thread }} -OS:${{ matrix.cmake_os }} -DEVICE:${{ matrix.cmake_device }} -GPU:${{ matrix.cmake_gpu }} -AUDIO:${{ matrix.cmake_audio }} -BUILD_TYPE:${{ matrix.cmake_type }}




#  run-matrix-msvc:
#    needs: [matrix]
#    strategy:
#      fail-fast: false
#      matrix:
#        include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}
#    name: "MSVC MSVC ${{ matrix.job_name }}"
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Install dependencies on windows
#        if: startsWith(matrix.os, 'windows')
#        run: |
#          choco install ninja cmake llvm
#          ninja --version
#          cmake --version
#        # cmd "${{ matrix.config.environment_script }}"
#        
#      - uses: actions/checkout@v3
#      - name: Build with OS Wide
#        if: startsWith(matrix.os, 'windows')
#        working-directory: ./teikitu/prj
#        shell: pwsh
#        run: .\windows_terminal_build_cmake_command.ps1 -BUILD -OS_WIDE -CLEAN -GITHUB -CPU:${{ matrix.cmake_cpu }} -THREAD:${{ matrix.cmake_thread }} -OS:${{ matrix.cmake_os }} -DEVICE:${{ matrix.cmake_device }} -GPU:${{ matrix.cmake_gpu }} -AUDIO:${{ matrix.cmake_audio }} -BUILD_TYPE:${{ matrix.cmake_type }}
#
#      - name: Build with OS Narrow
#        if: startsWith(matrix.os, 'windows')
#        working-directory: ./teikitu/prj
#        shell: pwsh
#        run: .\windows_terminal_build_cmake_command.ps1 -BUILD -CLEAN -GITHUB -CPU:${{ matrix.cmake_cpu }} -THREAD:${{ matrix.cmake_thread }} -OS:${{ matrix.cmake_os }} -DEVICE:${{ matrix.cmake_device }} -GPU:${{ matrix.cmake_gpu }} -AUDIO:${{ matrix.cmake_audio }} -BUILD_TYPE:${{ matrix.cmake_type }}




#      - name: Install dependencies on macos
#        if: startsWith(matrix.os, 'macos')
#        run: |
#          brew install p7zip cmake ninja
#          ninja --version
#          cmake --version
#
#      - name: Install dependencies on ubuntu
#        if: startsWith(matrix.os, 'ubuntu')
#        run: |
#          sudo apt-get update
#          sudo apt-get install ninja-build cmake
#          ninja --version
#          cmake --version
#          gcc --version
#
#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        run: ctest -C ${{env.BUILD_TYPE}}
