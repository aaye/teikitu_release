/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Render - Constants.h
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.12 | »GUID« 964CB1A6-814D-4E19-8E67-A83FCA98BF05 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2023, Andrew Aye.  All Rights Reserved.
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license,
    visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
#if !defined(TGS_RENDER_CONSTANTS_H)
#define TGS_RENDER_CONSTANTS_H
#pragma once


/* == Render ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */
/*  Configuration                                                                                                                                                                  */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */

#if defined(TgBUILD_FEATURE__GRAPHICS)

enum { KTgRN_MAX_FRAME_MESH                 =   256 }; /**< Maximum number of system per-frame mesh objects */
enum { KTgRN_MAX_PRTCL_BUFFER_SIZE          = 640000 }; /**< Number of bytes in the buffer */

enum { KTgRN_CXT_MAX_LIGHT_PER_INSTANCE     =    16 };

enum { KTgRN_MAX_MESH                       =  8192 };

/*# defined(TgBUILD_FEATURE__GRAPHICS) */
#endif


/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */
/*  Public Constants                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */

/* -- Data Constants ------------------------------------------------------------------------------------------------------------------------------------------------------------- */

enum { KTgRN_DATA_LIGHT__BAKED_DIRECT      = 1 <<  0,   /* Entire contribution is baked into the light map */
       KTgRN_DATA_LIGHT__BAKED_INDIRECT    = 1 <<  1,   /* Indirect/bounce lighting is baked into the light map */
       KTgRN_DATA_LIGHT__BAKED_SHADOW      = 1 <<  2,   /* Contributes to the baked shadow map */
       KTgRN_DATA_LIGHT__LIVE_LIGHT        = 1 <<  3,   /* Contributes to the run time lighting environment */
       KTgRN_DATA_LIGHT__LIVE_SHADOW       = 1 <<  4,   /* Contributes to the run time lighting shadow environment */
       KTgRN_DATA_LIGHT__HAS_GEOMETRY      = 1 <<  5,   /* Has custom lighting geometry */
       KTgRN_DATA_LIGHT__HAS_UPDATE        = 1 <<  6,   /* Has a per-frame update on the render thread */
       KTgRN_DATA_LIGHT__HAS_BOUNDS        = 1 <<  7,   /* Has a custom bounds */
       KTgRN_DATA_LIGHT__FIXED             = 1 <<  8,   /* Is considered to be fixed (commonly the environmental lights) */

       KTgRN_DATA_MESH__CAST_SHADOW        = 1 <<  0,   /* Mesh casts a shadow */
       KTgRN_DATA_MESH__FIXED              = 1 <<  1,   /* Mesh is considered to be fixed (commonly the environment) */
       KTgRN_DATA_MESH__SKY_BOX            = 1 <<  2,   /* Mesh is used as part of the sky box */
       KTgRN_DATA_MESH__PARTICLE           = 1 <<  3,   /* Mesh is generated by the particle system */

       KTgRN_DATA_MESH__SCREEN_SPACE       = 1 << 22,   /* The mesh should be rendered in screen space */
       KTgRN_DATA_MESH__REFRACTION         = 1 << 23,   /* The mesh will render into a refraction | reflection buffer */
       KTgRN_DATA_MESH__VELOCITY_BLUR      = 1 << 24,   /* The mesh will write out to a velocity buffer */
       KTgRN_DATA_MESH__DEPTH_TRANSPARENT  = 1 << 25,   /* Mesh is rendered into the depth buffer for post process */
       KTgRN_DATA_MESH__TRANSPARENT        = 1 << 26,   /* Mesh has a driving alpha value forcing it to be transparent */
       KTgRN_DATA_MESH__IN_FRUSTUM         = 1 << 27,   /* The mesh is in the render frame frustum */
       KTgRN_DATA_MESH__NO_LOD             = 1 << 28,   /* There should be no attempt to lod the mesh */
       KTgRN_DATA_MESH__NO_LIGHTING        = 1 << 29,   /* No lighting information should be generated for this mesh */

       KTgRN_DATA_MESH__EXCEED_LIGHT_COUNT = 1 << 30 }; /* Used by the debug system - this mesh has exceeded its light limit */



/* =============================================================================================================================================================================== */
#endif
