/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS (APPLE) Common - Math [Vector].inl
    »Author«    Andrew Aye (mailto: teikitu@andrewaye.com, https://www.andrew.aye.page)
    »Version«   5.17 | »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2023, Andrew Aye.  All Rights Reserved.
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license,
    visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
#if !defined(TGS_APPLE_COMMON_MATH_VECTOR_INL)

#if !defined(TGS_APPLE_COMMON_MATH_VECTOR_INL__ONCE)
#define TGS_APPLE_COMMON_MATH_VECTOR_INL__ONCE

#ifdef TGS_COMMON_MATH_API_VECTOR_SPECIALIZATION_INL
#error("Previous Platform Specialization loaded");
#endif

#define TGS_COMMON_MATH_API_VECTOR_SPECIALIZATION_INL

#include "TgS COMMON/TgS (APPLE) Common - Math [Vector] [F32_04].inl"
#include "TgS COMMON/TgS (APPLE) Common - Math [Vector] [F32].inl"


/* == Common ===================================================================================================================================================================== */

/* ---- tgMH_SET4_U32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_U32_04_1 tgMH_SET4_U32_04_1( TgUINT_F32_C uiX, TgUINT_F32_C uiY, TgUINT_F32_C uiZ, TgUINT_F32_C uiW )
{
    return ((TgVEC_U32_04_1){ uiX, uiY, uiZ, uiW });
}


/* ---- tgMH_SET4_S32_04_1 ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVEC_S32_04_1 tgMH_SET4_S32_04_1( TgSINT_F32_C iX, TgSINT_F32_C iY, TgSINT_F32_C iZ, TgSINT_F32_C iW )
{
    return ((TgVEC_S32_04_1){ iX, iY, iZ, iW });
}


/*# !defined(TGS_X86_64_COMMON_MATH_VECTOR_INL__ONCE) */
#endif

#if defined(TEMPLATE_TYPE_EXPANSION__RELOAD)

/* == Common ===================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ----  FCN_V(tgMH_SETU) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SETU)( VAR_T(CPCU) pVal )
{
    return (*(VEC_DEC_T_3(TgVEC1,1,CP))pVal);
}


/* ---- FCN_V(tgMH_SETA) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SETA)( VAR_T(CPCU) pVal )
{
    return (*(VEC_DEC_T_3(TgVEC1,1,CP))pVal);
}


/* ---- FCN_V(tgMH_SET1) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SET1)( VAR_T(C) Val )
{
    return (Val);
}


/* ---- FCN_V(tgMH_RAND) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_RAND)( TgVOID )
{
    TgUN_V128                           uResult;

    VEC_S_UN_1_MEMBER(uResult) = FCN_V(tgMH_RAND_S)();
    return (VEC_UN_1_MEMBER(uResult));
}


/* ---- FCN_V(tgMH_ADD) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_ADD)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (vLeft + vRight);
}


/* ---- FCN_V(tgMH_SUB) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SUB)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (vLeft - vRight);
}


/* ---- FCN_V(tgMH_NEG) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
#if !defined(TEMPLATE__ENABLE_INTEGER) || !defined(TEMPLATE__ENABLE_UNSIGNED)
TgINLINE VEC_T(1) FCN_V(tgMH_NEG)( VEC_T(1,C) vLeft )
{
    return (-vLeft );
}
#endif

/* ---- FCN_V(tgMH_AVG) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_AVG)( VEC_T(1,C) vARG0, VEC_T(1,C) vARG1 )
{
#if defined(TEMPLATE__ENABLE_INTEGER)
    #if defined(TEMPLATE__ENABLE_UNSIGNED)
        return ((vARG0/2) + (vARG1/2) + (((vARG0 & 1) + (vARG1 & 1))/2));
    #else
        VEC_T(1)                            v00, v01;

        v00 = FCN_V(tgMH_SGN)( vARG0 );
        v01 = FCN_V(tgMH_SGN)( vARG1 );

        return ((vARG0/2) + (vARG1/2) + (((vARG0 & 1) * v00 + (vARG1 & 1) * v01)/2));
    #endif
#else
    return ((vARG0 + vARG1) / 2);
#endif
}


/* ---- FCN_V(tgMH_ADD_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
#if defined(TEMPLATE__ENABLE_INTEGER)
TgINLINE VEC_T(1) FCN_V(tgMH_ADD_CLP)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    TgUN_V128                           uResult;

    VEC_S_UN_1_MEMBER(uResult) = FCN_V(tgMH_ADD_CLP_S)( *(VEC_S_T(1,CP))&vLeft, *(VEC_S_T(1,CP))&vRight );
    return (VEC_UN_1_MEMBER(uResult));
}
#endif


/* ---- FCN_V(tgMH_SUB_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
#if defined(TEMPLATE__ENABLE_INTEGER)
TgINLINE VEC_T(1) FCN_V(tgMH_SUB_CLP)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    TgUN_V128                           uResult;

    VEC_S_UN_1_MEMBER(uResult) = FCN_V(tgMH_SUB_CLP_S)( *(VEC_S_T(1,CP))&vLeft, *(VEC_S_T(1,CP))&vRight );
    return (VEC_UN_1_MEMBER(uResult));
}
#endif


/* ---- FCN_V(tgMH_PERM) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_PERM)( VEC_T(1,C) v0, VEC_T(1,C) v1, VEC_T(1,C) vMask )
{
    TgUN_V128                           uResult;

    VEC_S_UN_1_MEMBER(uResult) = FCN_V(tgMH_PERM_S)( *(VEC_S_T(1,CP))&v0, *(VEC_S_T(1,CP))&v1, (UVAR_T(CP))&vMask );
    return (VEC_UN_1_MEMBER(uResult));
}


/* ---- FCN_V(tgMH_SEL) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SEL)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight, VEC_T(1,C) tuvMask )
{
    return (simd_bitselect( vLeft, vRight, (TgMACRO_CONCAT5( TgVEC_S,GENERATE__TYPE_SIZE_TEXT,GENERATE__VECTOR_DIM_BREAK_LZ,TEMPLATE__VECTOR_DIM,_1 ))tuvMask ));
}


/* ---- FCN_V(tgMH_AND) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_AND)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))((TgVEC_U08_16_1)vLeft & (TgVEC_U08_16_1)vRight);
}


/* ---- FCN_V(tgMH_OR) ----------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_OR)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))((TgVEC_U08_16_1)vLeft | (TgVEC_U08_16_1)vRight);
}


/* ---- FCN_V(tgMH_XOR) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_XOR)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))((TgVEC_U08_16_1)vLeft ^ (TgVEC_U08_16_1)vRight);
}


/* ---- FCN_V(tgMH_MAX) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MAX)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (simd_max( vLeft, vRight ));
}


/* ---- FCN_V(tgMH_MAX_ELEM) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_MAX_ELEM)( VEC_T(1,C) vARG_0 )
{
    return (simd_reduce_max( vARG_0 ));
}


/* ---- FCN_V(tgMH_MIN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MIN)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (simd_min( vLeft, vRight ));
}


/* ---- FCN_V(tgMH_MIN_ELEM) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_MIN_ELEM)( VEC_T(1,C) vARG_0 )
{
    return (simd_reduce_min( vARG_0 ));
}


/* ---- FCN_V(tgMH_ABS) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_ABS)( VEC_T(1,C) vARG )
{
#if defined(TEMPLATE__ENABLE_INTEGER) && defined(TEMPLATE__ENABLE_UNSIGNED)
    return (vARG);
#else
    return (simd_abs( vARG ));
#endif
}


/* ---- FCN_V(tgMH_SGN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SGN)( VEC_T(1,C) vLeft )
{
#if defined(TEMPLATE__ENABLE_INTEGER)
    #if defined(TEMPLATE__ENABLE_UNSIGNED)
        return (simd_clamp( vLeft, 0, 1 ));
    #else
        return (simd_clamp( vLeft, -1, 1 ));
    #endif
#else
    return (simd_sign( vLeft ));
#endif
}


/* ---- FCN_V(tgMH_CMP_EQ) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
CLANG_WARN_DISABLE_PUSH(float-equal)
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_EQ)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))(vLeft == vRight);
}
CLANG_WARN_DISABLE_POP(float-equal)


/* ---- FCN_V(tgMH_CMP_NE) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
CLANG_WARN_DISABLE_PUSH(float-equal)
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_NE)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))(vLeft != vRight);
}
CLANG_WARN_DISABLE_POP(float-equal)


/* ---- FCN_V(tgMH_CMP_GE) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_GE)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))(vLeft >= vRight);
}


/* ---- FCN_V(tgMH_CMP_GT) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_GT)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))(vLeft > vRight);
}


/* ---- FCN_V(tgMH_CMP_LE) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_LE)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))(vLeft <= vRight);
}


/* ---- FCN_V(tgMH_CMP_LT) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_LT)( VEC_T(1,C) vLeft, VEC_T(1,C) vRight )
{
    return (VEC_T(1))(vLeft < vRight);
}


/* ---- FCN_V(tgMH_CMP_ALL_TO_BOOL) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_CMP_ALL_TO_BOOL)( VEC_T(1,C) vARG )
{
    return (simd_all( vARG != TYPE_K(0)));
}


/* ---- FCN_V(tgMH_CMP_ANY_TO_BOOL) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_CMP_ANY_TO_BOOL)( VEC_T(1,C) vARG )
{
    return (simd_any( vARG != TYPE_K(0)));
}

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"

/* =============================================================================================================================================================================== */


/*# !defined(TEMPLATE_TYPE_EXPANSION__RELOAD) */
#else

    #define TEMPLATE_TYPE_EXPANSION__RELOAD

    #define TEMPLATE__TEST_AND_UNLOAD_TEMPLATE_MACROS

    #define TEMPLATE__ENABLE_INTEGER
    #define TEMPLATE__ENABLE_UNSIGNED

    #define TEMPLATE__TYPE_SIZE 32
    #define TEMPLATE__VECTOR_DIM 4
    #include __FILE__

    #define TEMPLATE__TYPE_SIZE 16
    #define TEMPLATE__VECTOR_DIM 8
    #include __FILE__

    #define TEMPLATE__TYPE_SIZE 8
    #define TEMPLATE__VECTOR_DIM 16
    #include __FILE__

    #undef TEMPLATE__ENABLE_UNSIGNED

    #define TEMPLATE__TYPE_SIZE 32
    #define TEMPLATE__VECTOR_DIM 4
    #include __FILE__

    #define TEMPLATE__TYPE_SIZE 16
    #define TEMPLATE__VECTOR_DIM 8
    #include __FILE__

    #define TEMPLATE__TYPE_SIZE 8
    #define TEMPLATE__VECTOR_DIM 16
    #include __FILE__

    #undef TEMPLATE__ENABLE_INTEGER

    #define TEMPLATE__TYPE_SIZE 32
    #define TEMPLATE__VECTOR_DIM 4
    #include __FILE__

    #undef TEMPLATE_TYPE_EXPANSION__RELOAD

/*# !defined(TEMPLATE_TYPE_EXPANSION__RELOAD) */
#endif


/* =============================================================================================================================================================================== */

/*# !defined(TGS_APPLE_COMMON_MATH_VECTOR_INL) */
#endif
